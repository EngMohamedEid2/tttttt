{
  "resolvedId": "C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/node_modules/@nuxt/image-edge/dist/runtime/utils/meta.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "export async function imageMeta(_ctx, url) {\n  const meta = await _imageMeta(url).catch((err) => {\n    console.error(\"Failed to get image meta for \" + url, err + \"\");\n    return {\n      width: 0,\n      height: 0,\n      ratio: 0\n    };\n  });\n  return meta;\n}\nasync function _imageMeta(url) {\n  if (process.server) {\n    const imageMeta2 = await import(\"image-meta\").then((r) => r.imageMeta);\n    const data = await fetch(url).then((res) => res.buffer());\n    const metadata = imageMeta2(data);\n    if (!metadata) {\n      throw new Error(`No metadata could be extracted from the image \\`${url}\\`.`);\n    }\n    const { width, height } = metadata;\n    const meta = {\n      width,\n      height,\n      ratio: width && height ? width / height : void 0\n    };\n    return meta;\n  }\n  if (typeof Image === \"undefined\") {\n    throw new TypeError(\"Image not supported\");\n  }\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      const meta = {\n        width: img.width,\n        height: img.height,\n        ratio: img.width / img.height\n      };\n      resolve(meta);\n    };\n    img.onerror = (err) => reject(err);\n    img.src = url;\n  });\n}\n",
      "start": 1716056343514,
      "end": 1716056343656,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056343656,
      "end": 1716056343657,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056343656,
      "end": 1716056343657,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716056343657,
      "end": 1716056343657,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056343660,
      "end": 1716056343660,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056343660,
      "end": 1716056343660,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056343660,
      "end": 1716056343660,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056343660,
      "end": 1716056343660,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716056343664,
      "end": 1716056343664,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056343665,
      "end": 1716056343666,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716056343666,
      "end": 1716056343666,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "export async function imageMeta(_ctx, url) {\n  const meta = await _imageMeta(url).catch((err) => {\n    console.error(\"Failed to get image meta for \" + url, err + \"\");\n    return {\n      width: 0,\n      height: 0,\n      ratio: 0\n    };\n  });\n  return meta;\n}\nasync function _imageMeta(url) {\n  if (true) {\n    const imageMeta2 = await import(\"image-meta\").then((r) => r.imageMeta);\n    const data = await fetch(url).then((res) => res.buffer());\n    const metadata = imageMeta2(data);\n    if (!metadata) {\n      throw new Error(`No metadata could be extracted from the image \\`${url}\\`.`);\n    }\n    const { width, height } = metadata;\n    const meta = {\n      width,\n      height,\n      ratio: width && height ? width / height : void 0\n    };\n    return meta;\n  }\n  if (typeof Image === \"undefined\") {\n    throw new TypeError(\"Image not supported\");\n  }\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      const meta = {\n        width: img.width,\n        height: img.height,\n        ratio: img.width / img.height\n      };\n      resolve(meta);\n    };\n    img.onerror = (err) => reject(err);\n    img.src = url;\n  });\n}\n",
      "start": 1716056343669,
      "end": 1716056343746,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1716056343746,
      "end": 1716056343746,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716056343746,
      "end": 1716056343746,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716056343746,
      "end": 1716056343746,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716056343746,
      "end": 1716056343746,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716056343746,
      "end": 1716056343747,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716056343747,
      "end": 1716056343747,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716056343747,
      "end": 1716056343747,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056343747,
      "end": 1716056343747,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056343747,
      "end": 1716056343747,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056343747,
      "end": 1716056343748,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056343747,
      "end": 1716056343748,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716056343749,
      "end": 1716056343749,
      "order": "normal"
    }
  ]
}
