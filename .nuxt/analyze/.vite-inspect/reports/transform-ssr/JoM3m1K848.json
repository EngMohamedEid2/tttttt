{
  "resolvedId": "C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Widgets/Modals/AddressModal/index.vue?nuxt_component=async&nuxt_component_name=WidgetsModalsAddressModal",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\n<template>\n<div>\n  <div class=\"modal-header\">\n    <h3 class=\"fw-semibold\"> {{ (typeof addressId == 'number' ? 'Edit Address' : 'Add Address') }}</h3>\n    <WidgetsButton :classes=\"'btn btn-close'\" :id=\"'address_modal_close_btn'\" @onClick=\"() => { emit('close'); }\">\n      <Icon name=\"ri-close-line\" />\n    </WidgetsButton>\n  </div>\n  <form>\n    <div class=\"modal-body address-form\">\n      <div class=\"row g-4\">\n        <div class=\"col-xxl-12\">\n          <div class=\"\">\n            <label class=\"form-label\" for=\"pname\">{{ 'Title' }}</label>\n            <WidgetsInputFieldsNonEmptyField classes=\"form-control\" :formSubmitted=\"formSubmitted\" v-model=\"input.title\"\n              id=\"title\" placeholder=\"Enter Title\" />\n          </div>\n        </div>\n        <div class=\"col-12\">\n          <div class=\"\">\n            <label class=\"form-label\" for=\"address1\">{{ 'Address' }}</label>\n            <WidgetsInputFieldsNonEmptyField classes=\"form-control\" :formSubmitted=\"formSubmitted\" v-model=\"input.street\"\n              id=\"title\" placeholder=\"Enter Address\" />\n          </div>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"\">\n            <label class=\"form-label me-2\" for=\"address1\">{{ 'Country' }}</label>\n            <WidgetsInputFieldsSearchDropdown get-value-key=\"id\" display-key=\"name\" :form-submitted=\"formSubmitted\"\n              v-model=\"input.country_id\" placeholder=\"Select Country\" :holdKey=\"true\"\n              :display-value=\"input.country_id?.selected?.name\" :options=\"ResponseCountries\"\n              :initialData=\"ResponseCountries.filter((item) => item.id == input.country_id.data)[0]\" />\n          </div>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"\">\n            <label class=\"form-label me-2\" for=\"address1\">{{ 'State' }}</label>\n            <WidgetsInputFieldsSearchDropdown get-value-key=\"id\" placeholder=\"Select State\" display-key=\"name\"\n              :form-submitted=\"formSubmitted\" v-model=\"input.state_id\" :display-value=\"input.state_id?.selected?.name\"\n              :options=\"states\" :initialData=\"ResponseStates.filter((item) => item.id == input.state_id.data)[0]\" />\n          </div>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"\">\n            <label class=\"form-label\" for=\"address1\">{{ 'City' }}</label>\n            <WidgetsInputFieldsNonEmptyField classes=\"form-control\" :formSubmitted=\"formSubmitted\" v-model=\"input.city\"\n              id=\"title\" placeholder=\"Enter City\" />\n          </div>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"\">\n            <label class=\"form-label\" for=\"address1\">{{ 'Pincode' }}</label>\n            <WidgetsInputFieldsNonEmptyField classes=\"form-control\" :formSubmitted=\"formSubmitted\" v-model=\"input.pincode\"\n              id=\"title\" placeholder=\"Enter Pincode\" />\n          </div>\n        </div>\n        <div class=\"col-12 phone-field\">\n          <div class=\"\">\n            <div class=\"d-flex row\">\n              <label class=\"form-label\" for=\"phone\">{{ 'Phone Number' }}</label>\n              <span class=\"col-sm-2 col-3 pe-0\">\n                <WidgetsInputFieldsSearchDropdown :formSubmitted=\"formSubmitted\" :select-first=\"true\" getValueKey=\"id\"\n                  display-key=\"name\" v-model=\"input.country_code\" :form-submitted=\"formSubmitted\"\n                  :options=\"AllCountryCode\" />\n              </span>\n              <span class=\"col-sm-10 col-9 ps-0\">\n                <WidgetsInputFieldsNumberField type=\"number\" :formSubmitted=\"formSubmitted\" classes=\"form-control\"\n                  errorMessage=\"phone number is required.\" v-model=\"input.phone\" id=\"phone\"\n                  placeholder=\"Enter Phone Number\" />\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <WidgetsButton :classes=\"'btn btn-theme-outline btn-md fw-bold'\" :type=\"'button'\" :id=\"'cancel_addres_btn'\"\n          @onClick=\"() => { emit('close') }\">\n          {{ 'Cancel' }}\n        </WidgetsButton>\n        <WidgetsButton :classes=\"'btn theme-bg-color btn-md fw-bold text-light'\" :id=\"'submit_address_btn'\"\n          @click.prevent=\"setAddressCard()\">\n          {{ 'Submit' }}\n        </WidgetsButton>\n      </div>\n    </div>\n  </form>\n</div>\n</template>\n\n<script setup>\nimport { storeToRefs } from \"pinia\";\nimport { AllCountryCode } from '@/data/country_code'\nimport { useLocationStore } from \"@/store/location\";\nimport { useUserStore } from \"@/store/user\";\nimport isFormValid from \"@/utils/validators/formValidator\";\nlet props = defineProps({\n  addressId: Object,\n  user: Object\n})\nlet emit = defineEmits(['close'])\nlet { countries, states: allStates, ResponseStates, ResponseCountries } = storeToRefs(useLocationStore())\nlet input = ref({\n  title: { data: '' },\n  street: { data: '' },\n  city: { data: '' },\n  phone: { data: '' },\n  pincode: { data: '' },\n  country_id: { data: '' },\n  country_code: { data: '' },\n  state_id: { data: '' }\n})\n\nlet formSubmitted = ref(false)\nfunction getAddress() {\n  if (typeof props.addressId == 'number') {\n    let filterUser = props.user.address.filter((item) => item.id == props.addressId)[0]\n    Object.keys(input.value).forEach((key) => input.value[key].data = filterUser[key])\n  }\n}\ngetAddress()\nlet filtercountry = ResponseCountries.value.filter((item) => item.id == input.value.country_id.data)\n\nlet states = ref()\nwatch(() => input.value.country_id, () => {\n  setStatesArray();\n}, { deep: true })\n\nfunction setStatesArray() {\n  var countryId = input.value.country_id.data\n  states.value = ResponseStates.value.filter(state => state.country_id == countryId)\n}\n\nasync function setAddressCard() {\n  formSubmitted.value = true\n  if (isFormValid({ formData: input.value })) {\n    if (typeof props.addressId == 'number') {\n      await useFetch('/address/' + props.addressId, {\n        baseURL: BaseUrl,\n        method: 'put',\n        headers: GetHeaders(),\n        body: {\n          title: input.value.title.data,\n          street: input.value.street.data,\n          city: input.value.city.data,\n          phone: input.value.phone.data,\n          pincode: input.value.pincode.data,\n          country_code: input.value.country_code.data,\n          country_id: input.value.country_id.data,\n          state_id: input.value.state_id.data,\n          user_id: props.user.id\n        },\n        key: 'AddAddress'\n      })\n    }\n    else {\n      await useFetch('/address', {\n        baseURL: BaseUrl,\n        method: 'post',\n        headers: GetHeaders(),\n        body: {\n          title: input.value.title.data,\n          street: input.value.street.data,\n          city: input.value.city.data,\n          phone: input.value.phone.data,\n          pincode: input.value.pincode.data,\n          country_code: input.value.country_code.data,\n          country_id: input.value.country_id.data,\n          state_id: input.value.state_id.data,\n          user_id: props.user.id\n        },\n        key: 'AddAddress'\n      })\n    }\n  }\n  useUserStore().UpdateUserInfo()\n}\n</script>\n<style lang=\"scss\" scoped></style>",
      "start": 1716056339819,
      "end": 1716056339903,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716056339903,
      "end": 1716056339903,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import { resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, unref as _unref, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\"\nimport { ssrRenderComponent as _ssrRenderComponent, ssrRenderAttrs as _ssrRenderAttrs, ssrInterpolate as _ssrInterpolate } from \"vue/server-renderer\"\n\nimport { storeToRefs } from \"pinia\";\nimport { AllCountryCode } from '@/data/country_code'\nimport { useLocationStore } from \"@/store/location\";\nimport { useUserStore } from \"@/store/user\";\nimport isFormValid from \"@/utils/validators/formValidator\";\n\nconst _sfc_main = {\n  __name: 'index',\n  __ssrInlineRender: true,\n  props: {\n  addressId: Object,\n  user: Object\n},\n  emits: ['close'],\n  setup(__props, { emit: __emit }) {\n\nlet props = __props\nlet emit = __emit\nlet { countries, states: allStates, ResponseStates, ResponseCountries } = storeToRefs(useLocationStore())\nlet input = ref({\n  title: { data: '' },\n  street: { data: '' },\n  city: { data: '' },\n  phone: { data: '' },\n  pincode: { data: '' },\n  country_id: { data: '' },\n  country_code: { data: '' },\n  state_id: { data: '' }\n})\n\nlet formSubmitted = ref(false)\nfunction getAddress() {\n  if (typeof props.addressId == 'number') {\n    let filterUser = props.user.address.filter((item) => item.id == props.addressId)[0]\n    Object.keys(input.value).forEach((key) => input.value[key].data = filterUser[key])\n  }\n}\ngetAddress()\nlet filtercountry = ResponseCountries.value.filter((item) => item.id == input.value.country_id.data)\n\nlet states = ref()\nwatch(() => input.value.country_id, () => {\n  setStatesArray();\n}, { deep: true })\n\nfunction setStatesArray() {\n  var countryId = input.value.country_id.data\n  states.value = ResponseStates.value.filter(state => state.country_id == countryId)\n}\n\nasync function setAddressCard() {\n  formSubmitted.value = true\n  if (isFormValid({ formData: input.value })) {\n    if (typeof props.addressId == 'number') {\n      await useFetch('/address/' + props.addressId, {\n        baseURL: BaseUrl,\n        method: 'put',\n        headers: GetHeaders(),\n        body: {\n          title: input.value.title.data,\n          street: input.value.street.data,\n          city: input.value.city.data,\n          phone: input.value.phone.data,\n          pincode: input.value.pincode.data,\n          country_code: input.value.country_code.data,\n          country_id: input.value.country_id.data,\n          state_id: input.value.state_id.data,\n          user_id: props.user.id\n        },\n        key: 'AddAddress'\n      })\n    }\n    else {\n      await useFetch('/address', {\n        baseURL: BaseUrl,\n        method: 'post',\n        headers: GetHeaders(),\n        body: {\n          title: input.value.title.data,\n          street: input.value.street.data,\n          city: input.value.city.data,\n          phone: input.value.phone.data,\n          pincode: input.value.pincode.data,\n          country_code: input.value.country_code.data,\n          country_id: input.value.country_id.data,\n          state_id: input.value.state_id.data,\n          user_id: props.user.id\n        },\n        key: 'AddAddress'\n      })\n    }\n  }\n  useUserStore().UpdateUserInfo()\n}\n\nreturn (_ctx, _push, _parent, _attrs) => {\n  const _component_WidgetsButton = _resolveComponent(\"WidgetsButton\")\n  const _component_Icon = _resolveComponent(\"Icon\")\n  const _component_WidgetsInputFieldsNonEmptyField = _resolveComponent(\"WidgetsInputFieldsNonEmptyField\")\n  const _component_WidgetsInputFieldsSearchDropdown = _resolveComponent(\"WidgetsInputFieldsSearchDropdown\")\n  const _component_WidgetsInputFieldsNumberField = _resolveComponent(\"WidgetsInputFieldsNumberField\")\n\n  _push(`<div${\n    _ssrRenderAttrs(_attrs)\n  }><div class=\"modal-header\"><h3 class=\"fw-semibold\">${\n    _ssrInterpolate((typeof __props.addressId == 'number' ? 'Edit Address' : 'Add Address'))\n  }</h3>`)\n  _push(_ssrRenderComponent(_component_WidgetsButton, {\n    classes: 'btn btn-close',\n    id: 'address_modal_close_btn',\n    onOnClick: () => { _unref(emit)('close'); }\n  }, {\n    default: _withCtx((_, _push, _parent, _scopeId) => {\n      if (_push) {\n        _push(_ssrRenderComponent(_component_Icon, { name: \"ri-close-line\" }, null, _parent, _scopeId))\n      } else {\n        return [\n          _createVNode(_component_Icon, { name: \"ri-close-line\" })\n        ]\n      }\n    }),\n    _: 1\n  }, _parent))\n  _push(`</div><form><div class=\"modal-body address-form\"><div class=\"row g-4\"><div class=\"col-xxl-12\"><div class=\"\"><label class=\"form-label\" for=\"pname\">${_ssrInterpolate('Title')}</label>`)\n  _push(_ssrRenderComponent(_component_WidgetsInputFieldsNonEmptyField, {\n    classes: \"form-control\",\n    formSubmitted: _unref(formSubmitted),\n    modelValue: _unref(input).title,\n    \"onUpdate:modelValue\": $event => ((_unref(input).title) = $event),\n    id: \"title\",\n    placeholder: \"Enter Title\"\n  }, null, _parent))\n  _push(`</div></div><div class=\"col-12\"><div class=\"\"><label class=\"form-label\" for=\"address1\">${_ssrInterpolate('Address')}</label>`)\n  _push(_ssrRenderComponent(_component_WidgetsInputFieldsNonEmptyField, {\n    classes: \"form-control\",\n    formSubmitted: _unref(formSubmitted),\n    modelValue: _unref(input).street,\n    \"onUpdate:modelValue\": $event => ((_unref(input).street) = $event),\n    id: \"title\",\n    placeholder: \"Enter Address\"\n  }, null, _parent))\n  _push(`</div></div><div class=\"col-6\"><div class=\"\"><label class=\"form-label me-2\" for=\"address1\">${_ssrInterpolate('Country')}</label>`)\n  _push(_ssrRenderComponent(_component_WidgetsInputFieldsSearchDropdown, {\n    \"get-value-key\": \"id\",\n    \"display-key\": \"name\",\n    \"form-submitted\": _unref(formSubmitted),\n    modelValue: _unref(input).country_id,\n    \"onUpdate:modelValue\": $event => ((_unref(input).country_id) = $event),\n    placeholder: \"Select Country\",\n    holdKey: true,\n    \"display-value\": _unref(input).country_id?.selected?.name,\n    options: _unref(ResponseCountries),\n    initialData: _unref(ResponseCountries).filter((item) => item.id == _unref(input).country_id.data)[0]\n  }, null, _parent))\n  _push(`</div></div><div class=\"col-6\"><div class=\"\"><label class=\"form-label me-2\" for=\"address1\">${_ssrInterpolate('State')}</label>`)\n  _push(_ssrRenderComponent(_component_WidgetsInputFieldsSearchDropdown, {\n    \"get-value-key\": \"id\",\n    placeholder: \"Select State\",\n    \"display-key\": \"name\",\n    \"form-submitted\": _unref(formSubmitted),\n    modelValue: _unref(input).state_id,\n    \"onUpdate:modelValue\": $event => ((_unref(input).state_id) = $event),\n    \"display-value\": _unref(input).state_id?.selected?.name,\n    options: _unref(states),\n    initialData: _unref(ResponseStates).filter((item) => item.id == _unref(input).state_id.data)[0]\n  }, null, _parent))\n  _push(`</div></div><div class=\"col-6\"><div class=\"\"><label class=\"form-label\" for=\"address1\">${_ssrInterpolate('City')}</label>`)\n  _push(_ssrRenderComponent(_component_WidgetsInputFieldsNonEmptyField, {\n    classes: \"form-control\",\n    formSubmitted: _unref(formSubmitted),\n    modelValue: _unref(input).city,\n    \"onUpdate:modelValue\": $event => ((_unref(input).city) = $event),\n    id: \"title\",\n    placeholder: \"Enter City\"\n  }, null, _parent))\n  _push(`</div></div><div class=\"col-6\"><div class=\"\"><label class=\"form-label\" for=\"address1\">${_ssrInterpolate('Pincode')}</label>`)\n  _push(_ssrRenderComponent(_component_WidgetsInputFieldsNonEmptyField, {\n    classes: \"form-control\",\n    formSubmitted: _unref(formSubmitted),\n    modelValue: _unref(input).pincode,\n    \"onUpdate:modelValue\": $event => ((_unref(input).pincode) = $event),\n    id: \"title\",\n    placeholder: \"Enter Pincode\"\n  }, null, _parent))\n  _push(`</div></div><div class=\"col-12 phone-field\"><div class=\"\"><div class=\"d-flex row\"><label class=\"form-label\" for=\"phone\">${_ssrInterpolate('Phone Number')}</label><span class=\"col-sm-2 col-3 pe-0\">`)\n  _push(_ssrRenderComponent(_component_WidgetsInputFieldsSearchDropdown, {\n    formSubmitted: _unref(formSubmitted),\n    \"select-first\": true,\n    getValueKey: \"id\",\n    \"display-key\": \"name\",\n    modelValue: _unref(input).country_code,\n    \"onUpdate:modelValue\": $event => ((_unref(input).country_code) = $event),\n    \"form-submitted\": _unref(formSubmitted),\n    options: _unref(AllCountryCode)\n  }, null, _parent))\n  _push(`</span><span class=\"col-sm-10 col-9 ps-0\">`)\n  _push(_ssrRenderComponent(_component_WidgetsInputFieldsNumberField, {\n    type: \"number\",\n    formSubmitted: _unref(formSubmitted),\n    classes: \"form-control\",\n    errorMessage: \"phone number is required.\",\n    modelValue: _unref(input).phone,\n    \"onUpdate:modelValue\": $event => ((_unref(input).phone) = $event),\n    id: \"phone\",\n    placeholder: \"Enter Phone Number\"\n  }, null, _parent))\n  _push(`</span></div></div></div></div><div class=\"modal-footer\">`)\n  _push(_ssrRenderComponent(_component_WidgetsButton, {\n    classes: 'btn btn-theme-outline btn-md fw-bold',\n    type: 'button',\n    id: 'cancel_addres_btn',\n    onOnClick: () => { _unref(emit)('close') }\n  }, {\n    default: _withCtx((_, _push, _parent, _scopeId) => {\n      if (_push) {\n        _push(`${_ssrInterpolate('Cancel')}`)\n      } else {\n        return [\n          _createTextVNode(_toDisplayString('Cancel'))\n        ]\n      }\n    }),\n    _: 1\n  }, _parent))\n  _push(_ssrRenderComponent(_component_WidgetsButton, {\n    classes: 'btn theme-bg-color btn-md fw-bold text-light',\n    id: 'submit_address_btn',\n    onClick: $event => (setAddressCard())\n  }, {\n    default: _withCtx((_, _push, _parent, _scopeId) => {\n      if (_push) {\n        _push(`${_ssrInterpolate('Submit')}`)\n      } else {\n        return [\n          _createTextVNode(_toDisplayString('Submit'))\n        ]\n      }\n    }),\n    _: 1\n  }, _parent))\n  _push(`</div></div></form></div>`)\n}\n}\n\n}\n\n\n\nimport { useSSRContext as __vite_useSSRContext } from 'vue'\nconst _sfc_setup = _sfc_main.setup\n_sfc_main.setup = (props, ctx) => {\n  const ssrContext = __vite_useSSRContext()\n  ;(ssrContext.modules || (ssrContext.modules = new Set())).add(\"components/Widgets/Modals/AddressModal/index.vue\")\n  return _sfc_setup ? _sfc_setup(props, ctx) : undefined\n}\nexport default _sfc_main",
      "start": 1716056339903,
      "end": 1716056339908,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Widgets/Modals/AddressModal/index.vue\").then(r => r.default))",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716056339908,
      "end": 1716056339908,
      "order": "normal"
    }
  ]
}
