{
  "resolvedId": "C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Widgets/ThemeCustomizer/index.vue?nuxt_component=async&nuxt_component_name=WidgetsThemeCustomizer",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <OnClickOutside\n    @trigger=\"\n      () => {\n        open = false;\n      }\n    \"\n    class=\"setting-box\"\n  >\n    <WidgetsButton\n      :classes=\"'btn setting-button'\"\n      :id=\"'toggle_btn'\"\n      :type=\"'button'\"\n      @onClick=\"toggle()\"\n    >\n      <Icon\n        :class=\"open ? 'ri-close-fill' : 'ri-settings-3-fill'\"\n        name=\"ri:settings-4-fill\"\n      ></Icon>\n    </WidgetsButton>\n\n    <div class=\"theme-setting-2\" :class=\"[{ active: open }]\">\n      <div class=\"theme-box\">\n        <ul>\n          <li>\n            <div class=\"setting-name\">\n              <h4>{{ $t(\"Color\") }}</h4>\n            </div>\n            <div class=\"theme-setting-button color-picker\">\n              <form class=\"form-control\">\n                <label for=\"colorPick\" class=\"form-label mb-0\"\n                  >{{ $t(\"Theme Colo\") }}r</label\n                >\n                <input\n                  type=\"color\"\n                  class=\"form-control form-control-color\"\n                  id=\"colorPick\"\n                  value=\"#0da487\"\n                  title=\"Choose your color\"\n                />\n              </form>\n            </div>\n          </li>\n\n          <li>\n            <div class=\"setting-name\">\n              <h4>{{ $t(\"Dark\") }}</h4>\n            </div>\n            <div class=\"theme-setting-button\">\n              <WidgetsButton\n                :classes=\"mode === 'dark' ? 'btn btn-2 active' : 'btn btn-2'\"\n                :id=\"'dark_btn'\"\n                :type=\"'button'\"\n                @onClick=\"layoutMode('dark')\"\n              >\n                {{ $t(\"Dark\") }}\n              </WidgetsButton>\n              <WidgetsButton\n                :classes=\"mode === 'light' ? 'btn btn-2 active' : 'btn btn-2'\"\n                :id=\"'light_btn'\"\n                :type=\"'button'\"\n                @onClick=\"layoutMode('light')\"\n              >\n                {{ $t(\"Light\") }}\n              </WidgetsButton>\n            </div>\n          </li>\n\n          <!-- <li>\n            <div class=\"setting-name\">\n              <h4>{{ $t(\"RTL\") }}</h4>\n            </div>\n            <div class=\"theme-setting-button rtl\">\n              <WidgetsButton :classes=\"values === 'ltr' ? 'btn btn-2 active' : 'btn btn-2'\n                \" :id=\"'ltr_btn'\" :type=\"'button'\" @onClick=\"layout('ltr')\">\n                {{ $t(\"LTR\") }}\n              </WidgetsButton>\n              <WidgetsButton :classes=\"values === 'rtl' ? 'btn btn-2 active' : 'btn btn-2'\n                \" :id=\"'rtl_btn'\" :type=\"'button'\" @onClick=\"layout('rtl')\">\n                {{ $t(\"RTL\") }}\n              </WidgetsButton>\n            </div>\n          </li> -->\n        </ul>\n      </div>\n    </div>\n  </OnClickOutside>\n</template>\n\n<script setup>\nimport { OnClickOutside } from \"@vueuse/components\";\nimport { storeToRefs } from \"pinia\";\nimport { useDataStore } from \"@/store/data\";\n\nlet open = ref(false);\nlet show = ref(false);\nlet mode = ref(\"\");\nlet values = ref(\"\");\nlet primary_color = ref();\n\nuseDataStore().GetThemeoption();\nlet { ThemeOptions } = storeToRefs(useDataStore());\n\nconst toggle = () => {\n  open.value = !open.value;\n};\n\nfunction layout(value) {\n  values.value = value;\n  if (value === \"rtl\") {\n    if (process.client) {\n      document.body.classList.add(\"rtl\");\n      document.documentElement.dir = \"rtl\";\n    }\n  } else {\n    if (process.client) {\n      document.body.classList.remove(\"rtl\");\n      document.documentElement.dir = \"ltr\";\n    }\n  }\n}\n\nconst layoutMode = (value) => {\n  mode.value = value;\n  if (mode.value === \"dark\") {\n    document.getElementsByTagName(\"html\")[0].classList.add(\"dark\");\n  } else {\n    document.getElementsByTagName(\"html\")[0].classList.remove(\"dark\");\n  }\n};\n\nconst customizeThemeColor = (event) => {\n  document.documentElement.style.setProperty(\n    \"--theme-color\",\n    event.target.value\n  );\n};\n\nconst closeDropdown = () => {\n  open.value = false;\n};\n\nonMounted(() => {\n  let option = ThemeOptions.options;\n  mode.value = option?.general ? option?.general?.mode : \"light\";\n  values.value = option?.general ? option?.general?.language_direction : \"ltr\";\n});\n\nonBeforeUnmount(() => {\n  document.documentElement.style.removeProperty(\"--theme-color\");\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n",
      "start": 1716056339967,
      "end": 1716056340138,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716056340138,
      "end": 1716056340138,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import { unref as _unref, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, isRef as _isRef, mergeProps as _mergeProps } from \"vue\"\nimport { ssrRenderComponent as _ssrRenderComponent, ssrRenderClass as _ssrRenderClass, ssrInterpolate as _ssrInterpolate } from \"vue/server-renderer\"\n\nimport { OnClickOutside } from \"@vueuse/components\";\nimport { storeToRefs } from \"pinia\";\nimport { useDataStore } from \"@/store/data\";\n\n\nconst _sfc_main = {\n  __name: 'index',\n  __ssrInlineRender: true,\n  setup(__props) {\n\nlet open = ref(false);\nlet show = ref(false);\nlet mode = ref(\"\");\nlet values = ref(\"\");\nlet primary_color = ref();\n\nuseDataStore().GetThemeoption();\nlet { ThemeOptions } = storeToRefs(useDataStore());\n\nconst toggle = () => {\n  open.value = !open.value;\n};\n\nfunction layout(value) {\n  values.value = value;\n  if (value === \"rtl\") {\n    if (process.client) {\n      document.body.classList.add(\"rtl\");\n      document.documentElement.dir = \"rtl\";\n    }\n  } else {\n    if (process.client) {\n      document.body.classList.remove(\"rtl\");\n      document.documentElement.dir = \"ltr\";\n    }\n  }\n}\n\nconst layoutMode = (value) => {\n  mode.value = value;\n  if (mode.value === \"dark\") {\n    document.getElementsByTagName(\"html\")[0].classList.add(\"dark\");\n  } else {\n    document.getElementsByTagName(\"html\")[0].classList.remove(\"dark\");\n  }\n};\n\nconst customizeThemeColor = (event) => {\n  document.documentElement.style.setProperty(\n    \"--theme-color\",\n    event.target.value\n  );\n};\n\nconst closeDropdown = () => {\n  open.value = false;\n};\n\nonMounted(() => {\n  let option = ThemeOptions.options;\n  mode.value = option?.general ? option?.general?.mode : \"light\";\n  values.value = option?.general ? option?.general?.language_direction : \"ltr\";\n});\n\nonBeforeUnmount(() => {\n  document.documentElement.style.removeProperty(\"--theme-color\");\n});\n\nreturn (_ctx, _push, _parent, _attrs) => {\n  const _component_WidgetsButton = _resolveComponent(\"WidgetsButton\")\n  const _component_Icon = _resolveComponent(\"Icon\")\n\n  _push(_ssrRenderComponent(_unref(OnClickOutside), _mergeProps({\n    onTrigger: \n      () => {\n        _isRef(open) ? open.value = false : open = false;\n      }\n    ,\n    class: \"setting-box\"\n  }, _attrs), {\n    default: _withCtx((_, _push, _parent, _scopeId) => {\n      if (_push) {\n        _push(_ssrRenderComponent(_component_WidgetsButton, {\n          classes: 'btn setting-button',\n          id: 'toggle_btn',\n          type: 'button',\n          onOnClick: $event => (toggle())\n        }, {\n          default: _withCtx((_, _push, _parent, _scopeId) => {\n            if (_push) {\n              _push(_ssrRenderComponent(_component_Icon, {\n                class: _unref(open) ? 'ri-close-fill' : 'ri-settings-3-fill',\n                name: \"ri:settings-4-fill\"\n              }, null, _parent, _scopeId))\n            } else {\n              return [\n                _createVNode(_component_Icon, {\n                  class: _unref(open) ? 'ri-close-fill' : 'ri-settings-3-fill',\n                  name: \"ri:settings-4-fill\"\n                }, null, 8, [\"class\"])\n              ]\n            }\n          }),\n          _: 1\n        }, _parent, _scopeId))\n        _push(`<div class=\"${\n          _ssrRenderClass([[{ active: _unref(open) }], \"theme-setting-2\"])\n        }\"${\n          _scopeId\n        }><div class=\"theme-box\"${\n          _scopeId\n        }><ul${\n          _scopeId\n        }><li${\n          _scopeId\n        }><div class=\"setting-name\"${\n          _scopeId\n        }><h4${\n          _scopeId\n        }>${\n          _ssrInterpolate(_ctx.$t(\"Color\"))\n        }</h4></div><div class=\"theme-setting-button color-picker\"${\n          _scopeId\n        }><form class=\"form-control\"${\n          _scopeId\n        }><label for=\"colorPick\" class=\"form-label mb-0\"${\n          _scopeId\n        }>${\n          _ssrInterpolate(_ctx.$t(\"Theme Colo\"))\n        }r</label><input type=\"color\" class=\"form-control form-control-color\" id=\"colorPick\" value=\"#0da487\" title=\"Choose your color\"${\n          _scopeId\n        }></form></div></li><li${\n          _scopeId\n        }><div class=\"setting-name\"${\n          _scopeId\n        }><h4${\n          _scopeId\n        }>${\n          _ssrInterpolate(_ctx.$t(\"Dark\"))\n        }</h4></div><div class=\"theme-setting-button\"${\n          _scopeId\n        }>`)\n        _push(_ssrRenderComponent(_component_WidgetsButton, {\n          classes: _unref(mode) === 'dark' ? 'btn btn-2 active' : 'btn btn-2',\n          id: 'dark_btn',\n          type: 'button',\n          onOnClick: $event => (layoutMode('dark'))\n        }, {\n          default: _withCtx((_, _push, _parent, _scopeId) => {\n            if (_push) {\n              _push(`${_ssrInterpolate(_ctx.$t(\"Dark\"))}`)\n            } else {\n              return [\n                _createTextVNode(_toDisplayString(_ctx.$t(\"Dark\")), 1)\n              ]\n            }\n          }),\n          _: 1\n        }, _parent, _scopeId))\n        _push(_ssrRenderComponent(_component_WidgetsButton, {\n          classes: _unref(mode) === 'light' ? 'btn btn-2 active' : 'btn btn-2',\n          id: 'light_btn',\n          type: 'button',\n          onOnClick: $event => (layoutMode('light'))\n        }, {\n          default: _withCtx((_, _push, _parent, _scopeId) => {\n            if (_push) {\n              _push(`${_ssrInterpolate(_ctx.$t(\"Light\"))}`)\n            } else {\n              return [\n                _createTextVNode(_toDisplayString(_ctx.$t(\"Light\")), 1)\n              ]\n            }\n          }),\n          _: 1\n        }, _parent, _scopeId))\n        _push(`</div></li></ul></div></div>`)\n      } else {\n        return [\n          _createVNode(_component_WidgetsButton, {\n            classes: 'btn setting-button',\n            id: 'toggle_btn',\n            type: 'button',\n            onOnClick: $event => (toggle())\n          }, {\n            default: _withCtx(() => [\n              _createVNode(_component_Icon, {\n                class: _unref(open) ? 'ri-close-fill' : 'ri-settings-3-fill',\n                name: \"ri:settings-4-fill\"\n              }, null, 8, [\"class\"])\n            ]),\n            _: 1\n          }, 8, [\"onOnClick\"]),\n          _createVNode(\"div\", {\n            class: [\"theme-setting-2\", [{ active: _unref(open) }]]\n          }, [\n            _createVNode(\"div\", { class: \"theme-box\" }, [\n              _createVNode(\"ul\", null, [\n                _createVNode(\"li\", null, [\n                  _createVNode(\"div\", { class: \"setting-name\" }, [\n                    _createVNode(\"h4\", null, _toDisplayString(_ctx.$t(\"Color\")), 1)\n                  ]),\n                  _createVNode(\"div\", { class: \"theme-setting-button color-picker\" }, [\n                    _createVNode(\"form\", { class: \"form-control\" }, [\n                      _createVNode(\"label\", {\n                        for: \"colorPick\",\n                        class: \"form-label mb-0\"\n                      }, _toDisplayString(_ctx.$t(\"Theme Colo\")) + \"r\", 1),\n                      _createVNode(\"input\", {\n                        type: \"color\",\n                        class: \"form-control form-control-color\",\n                        id: \"colorPick\",\n                        value: \"#0da487\",\n                        title: \"Choose your color\"\n                      })\n                    ])\n                  ])\n                ]),\n                _createVNode(\"li\", null, [\n                  _createVNode(\"div\", { class: \"setting-name\" }, [\n                    _createVNode(\"h4\", null, _toDisplayString(_ctx.$t(\"Dark\")), 1)\n                  ]),\n                  _createVNode(\"div\", { class: \"theme-setting-button\" }, [\n                    _createVNode(_component_WidgetsButton, {\n                      classes: _unref(mode) === 'dark' ? 'btn btn-2 active' : 'btn btn-2',\n                      id: 'dark_btn',\n                      type: 'button',\n                      onOnClick: $event => (layoutMode('dark'))\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(_toDisplayString(_ctx.$t(\"Dark\")), 1)\n                      ]),\n                      _: 1\n                    }, 8, [\"classes\", \"onOnClick\"]),\n                    _createVNode(_component_WidgetsButton, {\n                      classes: _unref(mode) === 'light' ? 'btn btn-2 active' : 'btn btn-2',\n                      id: 'light_btn',\n                      type: 'button',\n                      onOnClick: $event => (layoutMode('light'))\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(_toDisplayString(_ctx.$t(\"Light\")), 1)\n                      ]),\n                      _: 1\n                    }, 8, [\"classes\", \"onOnClick\"])\n                  ])\n                ])\n              ])\n            ])\n          ], 2)\n        ]\n      }\n    }),\n    _: 1\n  }, _parent))\n}\n}\n\n}\n\n\n\nimport { useSSRContext as __vite_useSSRContext } from 'vue'\nconst _sfc_setup = _sfc_main.setup\n_sfc_main.setup = (props, ctx) => {\n  const ssrContext = __vite_useSSRContext()\n  ;(ssrContext.modules || (ssrContext.modules = new Set())).add(\"components/Widgets/ThemeCustomizer/index.vue\")\n  return _sfc_setup ? _sfc_setup(props, ctx) : undefined\n}\nexport default _sfc_main",
      "start": 1716056340138,
      "end": 1716056340144,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716056340144,
      "end": 1716056340144,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056340144,
      "end": 1716056340144,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056340144,
      "end": 1716056340144,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056340144,
      "end": 1716056340144,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056340144,
      "end": 1716056340144,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Widgets/ThemeCustomizer/index.vue\").then(r => r.default))",
      "start": 1716056340144,
      "end": 1716056340144,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1716056340144,
      "end": 1716056340144,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716056340144,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716056340145,
      "end": 1716056340145,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716056340145,
      "end": 1716056340146,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716056340146,
      "end": 1716056340146,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716056340146,
      "end": 1716056340146,
      "order": "normal"
    }
  ]
}
