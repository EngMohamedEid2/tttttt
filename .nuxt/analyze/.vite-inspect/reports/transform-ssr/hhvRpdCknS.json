{
  "resolvedId": "C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Shop/ProductDetails/Widgets/QuestionsAnswers/index.vue?nuxt_component=async&nuxt_component_name=ShopProductDetailsWidgetsQuestionsAnswers",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n<div>\n  <div class=\"question-answer skeleton-qa\" v-if=\"skeletonLoader\">\n    <ul>\n      <li v-for=\"item of skeletonItems\" :key=\"item\">\n        <div class=\"question-box\">\n          <h5></h5>\n          <h6 class=\"font-weight-bold que\"></h6>\n        </div>\n        <div class=\"answer-box\">\n          <h5></h5>\n          <div>\n            <p class=\"ans\"></p>\n            <p class=\"ans\"></p>\n          </div>\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"post-question-box\">\n    <h4>\n      {{ \"Have Doubts Regarding This Product\" }} ?\n      <a href=\"javascript:void(0)\" @click=\"(questionanswerModal) => {\n        questionModal({ questionanswerModal });\n      }\n        \">{{ \"Post Your Question\" }}</a>\n    </h4>\n  </div>\n  <div class=\"question-answer\">\n    <ul v-if=\"questionAnswers?.length\">\n      <li v-for=\"(qna, index) of questionAnswers\" :key=\"qna\">\n        <div class=\"question-box\">\n          <h5>{{ \"q\" }}{{ index + 1 }}</h5>\n          <h6 class=\"font-weight-bold que\">{{ qna?.question }}</h6>\n          <ul class=\"link-dislike-box\">\n            <!-- -->\n            <li v-if=\"!qna?.answer\">\n\n              <a href=\"javascript:void(0)\" @click=\"(questionanswerModal) => {\n                questionModal(qna);\n              }\n                \">\n                <span>\n                  <Icon name=\"ri-edit-fill\"></Icon>\n                </span>\n              </a>\n            </li>\n            <li v-if=\"qna?.answer\">\n              <a href=\"javascript:void(0)\" @click=\"feedback(qna, 'liked'), liked = !liked\">\n                <span>\n                  <Icon :name=\"qnaID.includes(qna.id)  ? 'ri:thumb-up-fill' : 'ri:thumb-up-line'\" />\n                  {{ qnaID.includes(qna.id) ? qna.total_likes + 1 : qna.total_likes }}\n                </span>\n              </a>\n            </li>\n            <li v-if=\"qna?.answer\">\n              <a href=\"javascript:void(0)\" @click=\"feedback(qna, 'disliked'), disliked = !disliked\">\n                <span>\n                  <Icon :name=\"qnaunLikeId.includes(qna.id) ? 'ri:thumb-down-fill' : 'ri:thumb-down-line'\" />\n                  {{ qnaunLikeId.includes(qna.id) ? qna.total_likes + 1 : qna.total_likes }}\n                </span>\n              </a>\n            </li>\n          </ul>\n        </div>\n        <div class=\"answer-box\">\n          <div class=\"answer-box\" v-if=\"qna?.answer\">\n            <h5>{{ \"a\" }}{{ index + 1 }}</h5>\n            <p class=\"ans\">{{ qna?.answer }}</p>\n          </div>\n        </div>\n      </li>\n    </ul>\n    <WidgetsNoData :classes=\"'no-data-added'\" :text=\"'No Question Posted Yet'\"\n      :description=\"'There are currently no question for this productoduct'\" v-if=\"!questionAnswers?.length\" />\n  </div>\n  <WidgetsModalsCommon :showModal=\"questionanswerModal\" @close=\"questionModal({ state: false })\">\n    <WidgetsModalsQuestionModal :product=\"product\" :qna=\"qnaObject\" @close=\"questionModal({ state: false })\" />\n  </WidgetsModalsCommon>\n</div>\n</template>\n\n<script setup>\nlet props = defineProps({\n  product: Object,\n  questionAnswers: Object,\n});\nlet likeUnliked = ref()\nlet qnaID = ref([])\nlet qnaObject = ref({})\nlet qnaunLikeId = ref([])\nlet feddbackValue = ref('')\nlet questionanswerModal = ref(false);\nconst skeletonLoader = ref(true)\nlet skeletonItems = Array.from({ length: 9 }, (_, index) => index);\n\nfunction questionModal({qna, state = true}) {\n  questionanswerModal.value = state;\n  qnaObject.value = qna\n}\nfunction feedback(qna, feedback) {\n  if (feedback == 'liked') {\n\n    if (qnaID.value.includes(qna.id)) {\n      let index = qnaID.value.indexOf(qna.id)\n      qnaID.value.splice(index, 1)\n      feddbackValue.value = ''\n    }\n    else {\n      qnaID.value.push(qna.id)\n      feddbackValue.value = feedback\n     if(qnaunLikeId.value.includes(qna.id)){\n       let index = qnaunLikeId.value.indexOf(qna.id)\n      qnaunLikeId.value.splice(index, 1)\n     }\n    }\n    sendFeedback(qna.id, feedback)\n  }\n  else if (feedback == 'disliked') {\n    if (qnaunLikeId.value.includes(qna.id)) {\n      let index = qnaunLikeId.value.indexOf(qna.id)\n      qnaunLikeId.value.splice(index, 1)\n      feddbackValue.value = ''\n    }\n    else {\n      qnaunLikeId.value.push(qna.id)\n      feddbackValue.value = feedback\n      if(qnaID.value.includes(qna.id)){\n        let index = qnaID.value.indexOf(qna.id)\n        qnaID.value.splice(index, 1)\n      }\n\n    }\n  }\n  sendFeedback(qna.id, feedback)\n}\nasync function sendFeedback(id, feedback) {\n  let userData = localStorage.getItem('usersAccount')\n  if (userData) {\n    let { data, error } = await useFetch('question-and-answer/feedback', {\n      method: 'post',\n      headers: GetHeaders(),\n      baseURL: BaseUrl,\n      body: {\n        question_and_answer_id: id,\n        reaction: feedback\n      }\n    })\n  }\n}\nonMounted(() => {\n  setTimeout(() => {\n    skeletonLoader.value = false\n  }, 2000);\n})\n\n</script>\n<style lang=\"scss\" scoped></style>\n",
      "start": 1716056339520,
      "end": 1716056339596,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716056339596,
      "end": 1716056339596,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import { unref as _unref, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\"\nimport { ssrRenderComponent as _ssrRenderComponent, ssrRenderAttrs as _ssrRenderAttrs, ssrRenderList as _ssrRenderList, ssrInterpolate as _ssrInterpolate } from \"vue/server-renderer\"\n\n\nconst _sfc_main = {\n  __name: 'index',\n  __ssrInlineRender: true,\n  props: {\n  product: Object,\n  questionAnswers: Object,\n},\n  setup(__props) {\n\nlet props = __props;\nlet likeUnliked = ref()\nlet qnaID = ref([])\nlet qnaObject = ref({})\nlet qnaunLikeId = ref([])\nlet feddbackValue = ref('')\nlet questionanswerModal = ref(false);\nconst skeletonLoader = ref(true)\nlet skeletonItems = Array.from({ length: 9 }, (_, index) => index);\n\nfunction questionModal({qna, state = true}) {\n  questionanswerModal.value = state;\n  qnaObject.value = qna\n}\nfunction feedback(qna, feedback) {\n  if (feedback == 'liked') {\n\n    if (qnaID.value.includes(qna.id)) {\n      let index = qnaID.value.indexOf(qna.id)\n      qnaID.value.splice(index, 1)\n      feddbackValue.value = ''\n    }\n    else {\n      qnaID.value.push(qna.id)\n      feddbackValue.value = feedback\n     if(qnaunLikeId.value.includes(qna.id)){\n       let index = qnaunLikeId.value.indexOf(qna.id)\n      qnaunLikeId.value.splice(index, 1)\n     }\n    }\n    sendFeedback(qna.id, feedback)\n  }\n  else if (feedback == 'disliked') {\n    if (qnaunLikeId.value.includes(qna.id)) {\n      let index = qnaunLikeId.value.indexOf(qna.id)\n      qnaunLikeId.value.splice(index, 1)\n      feddbackValue.value = ''\n    }\n    else {\n      qnaunLikeId.value.push(qna.id)\n      feddbackValue.value = feedback\n      if(qnaID.value.includes(qna.id)){\n        let index = qnaID.value.indexOf(qna.id)\n        qnaID.value.splice(index, 1)\n      }\n\n    }\n  }\n  sendFeedback(qna.id, feedback)\n}\nasync function sendFeedback(id, feedback) {\n  let userData = localStorage.getItem('usersAccount')\n  if (userData) {\n    let { data, error } = await useFetch('question-and-answer/feedback', {\n      method: 'post',\n      headers: GetHeaders(),\n      baseURL: BaseUrl,\n      body: {\n        question_and_answer_id: id,\n        reaction: feedback\n      }\n    })\n  }\n}\nonMounted(() => {\n  setTimeout(() => {\n    skeletonLoader.value = false\n  }, 2000);\n})\n\n\nreturn (_ctx, _push, _parent, _attrs) => {\n  const _component_Icon = _resolveComponent(\"Icon\")\n  const _component_WidgetsNoData = _resolveComponent(\"WidgetsNoData\")\n  const _component_WidgetsModalsCommon = _resolveComponent(\"WidgetsModalsCommon\")\n  const _component_WidgetsModalsQuestionModal = _resolveComponent(\"WidgetsModalsQuestionModal\")\n\n  _push(`<div${_ssrRenderAttrs(_attrs)}>`)\n  if (_unref(skeletonLoader)) {\n    _push(`<div class=\"question-answer skeleton-qa\"><ul><!--[-->`)\n    _ssrRenderList(_unref(skeletonItems), (item) => {\n      _push(`<li><div class=\"question-box\"><h5></h5><h6 class=\"font-weight-bold que\"></h6></div><div class=\"answer-box\"><h5></h5><div><p class=\"ans\"></p><p class=\"ans\"></p></div></div></li>`)\n    })\n    _push(`<!--]--></ul></div>`)\n  } else {\n    _push(`<!---->`)\n  }\n  _push(`<div class=\"post-question-box\"><h4>${\n    _ssrInterpolate(\"Have Doubts Regarding This Product\")\n  } ? <a href=\"javascript:void(0)\">${\n    _ssrInterpolate(\"Post Your Question\")\n  }</a></h4></div><div class=\"question-answer\">`)\n  if (__props.questionAnswers?.length) {\n    _push(`<ul><!--[-->`)\n    _ssrRenderList(__props.questionAnswers, (qna, index) => {\n      _push(`<li><div class=\"question-box\"><h5>${\n        _ssrInterpolate(\"q\")\n      }${\n        _ssrInterpolate(index + 1)\n      }</h5><h6 class=\"font-weight-bold que\">${\n        _ssrInterpolate(qna?.question)\n      }</h6><ul class=\"link-dislike-box\">`)\n      if (!qna?.answer) {\n        _push(`<li><a href=\"javascript:void(0)\"><span>`)\n        _push(_ssrRenderComponent(_component_Icon, { name: \"ri-edit-fill\" }, null, _parent))\n        _push(`</span></a></li>`)\n      } else {\n        _push(`<!---->`)\n      }\n      if (qna?.answer) {\n        _push(`<li><a href=\"javascript:void(0)\"><span>`)\n        _push(_ssrRenderComponent(_component_Icon, {\n          name: _unref(qnaID).includes(qna.id)  ? 'ri:thumb-up-fill' : 'ri:thumb-up-line'\n        }, null, _parent))\n        _push(` ${_ssrInterpolate(_unref(qnaID).includes(qna.id) ? qna.total_likes + 1 : qna.total_likes)}</span></a></li>`)\n      } else {\n        _push(`<!---->`)\n      }\n      if (qna?.answer) {\n        _push(`<li><a href=\"javascript:void(0)\"><span>`)\n        _push(_ssrRenderComponent(_component_Icon, {\n          name: _unref(qnaunLikeId).includes(qna.id) ? 'ri:thumb-down-fill' : 'ri:thumb-down-line'\n        }, null, _parent))\n        _push(` ${_ssrInterpolate(_unref(qnaunLikeId).includes(qna.id) ? qna.total_likes + 1 : qna.total_likes)}</span></a></li>`)\n      } else {\n        _push(`<!---->`)\n      }\n      _push(`</ul></div><div class=\"answer-box\">`)\n      if (qna?.answer) {\n        _push(`<div class=\"answer-box\"><h5>${\n          _ssrInterpolate(\"a\")\n        }${\n          _ssrInterpolate(index + 1)\n        }</h5><p class=\"ans\">${\n          _ssrInterpolate(qna?.answer)\n        }</p></div>`)\n      } else {\n        _push(`<!---->`)\n      }\n      _push(`</div></li>`)\n    })\n    _push(`<!--]--></ul>`)\n  } else {\n    _push(`<!---->`)\n  }\n  if (!__props.questionAnswers?.length) {\n    _push(_ssrRenderComponent(_component_WidgetsNoData, {\n      classes: 'no-data-added',\n      text: 'No Question Posted Yet',\n      description: 'There are currently no question for this productoduct'\n    }, null, _parent))\n  } else {\n    _push(`<!---->`)\n  }\n  _push(`</div>`)\n  _push(_ssrRenderComponent(_component_WidgetsModalsCommon, {\n    showModal: _unref(questionanswerModal),\n    onClose: $event => (questionModal({ state: false }))\n  }, {\n    default: _withCtx((_, _push, _parent, _scopeId) => {\n      if (_push) {\n        _push(_ssrRenderComponent(_component_WidgetsModalsQuestionModal, {\n          product: __props.product,\n          qna: _unref(qnaObject),\n          onClose: $event => (questionModal({ state: false }))\n        }, null, _parent, _scopeId))\n      } else {\n        return [\n          _createVNode(_component_WidgetsModalsQuestionModal, {\n            product: __props.product,\n            qna: _unref(qnaObject),\n            onClose: $event => (questionModal({ state: false }))\n          }, null, 8, [\"product\", \"qna\", \"onClose\"])\n        ]\n      }\n    }),\n    _: 1\n  }, _parent))\n  _push(`</div>`)\n}\n}\n\n}\n\n\n\nimport { useSSRContext as __vite_useSSRContext } from 'vue'\nconst _sfc_setup = _sfc_main.setup\n_sfc_main.setup = (props, ctx) => {\n  const ssrContext = __vite_useSSRContext()\n  ;(ssrContext.modules || (ssrContext.modules = new Set())).add(\"components/Shop/ProductDetails/Widgets/QuestionsAnswers/index.vue\")\n  return _sfc_setup ? _sfc_setup(props, ctx) : undefined\n}\nexport default _sfc_main",
      "start": 1716056339596,
      "end": 1716056339600,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Shop/ProductDetails/Widgets/QuestionsAnswers/index.vue\").then(r => r.default))",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716056339600,
      "end": 1716056339600,
      "order": "normal"
    }
  ]
}
