{
  "resolvedId": "C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Widgets/VariantAttributes/index.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n<div>\n  <div v-for=\"(attribute, index) in attributes\" :key=\"index\">\n    <div class=\"product-title\" v-if=\"!isAllVariantStyleDropdown\">\n      <h4>{{ attribute?.name }} : {{ attribute?.selected_value }}</h4>\n    </div>\n\n    <div v-if=\"attribute?.style == 'dropdown' || isAllVariantStyleDropdown\">\n      <select id=\"input-state-{{index}}\" class=\"form-control form-select\"\n        @change=\"setVariant(product.variations, attribute.attribute_values[$event.target.value])\">\n        <option selected disabled>{{ $t('Choose') }} {{ attribute?.name }}</option>\n        <template v-for=\"(value, index) in attribute.attribute_values\" :key=\"index\">\n          <option :selected=\"variantIds.includes(value.id) && !soldOutAttributesIds.includes(value.id)\" :value=\"index\"\n            :disabled=\"soldOutAttributesIds.includes(value.id)\" v-if=\"attributeValues?.includes(value.id)\">\n            {{ value.value }}\n          </option>\n        </template>\n      </select>\n    </div>\n\n    <div v-else-if=\"attribute?.style == 'radio'\">\n      <div class=\"d-flex gap-3\">\n        <div v-for=\"(value, index) of attribute.attribute_values\" :key=\"index\">\n          <div class=\"form-check\" v-if=\"attributeValues?.includes(value.id)\">\n            <input type=\"radio\" class=\"form-check-input\" :id=\"'radio-' + index + '-' + index\"\n              :name=\"'radio-group-' + index\" :value=\"index\"\n              :checked=\"variantIds.includes(value.id) && !soldOutAttributesIds.includes(value.id)\"\n              :disabled=\"soldOutAttributesIds.includes(value.id)\"\n              :class=\"{ 'disabled': soldOutAttributesIds.includes(value.id) }\"\n              @change=\"setVariant(product.variations, attribute.attribute_values[$event.target.value])\" />\n            <label :for=\"'radio-' + index + '-' + index\" class=\"form-check-label\">{{ value?.value }}</label>\n          </div>\n        </div>\n      </div>\n    </div>\n    <template v-else>\n      <ul class=\"select-package circle\" :class=\"attribute?.style\" v-if=\"attribute?.style == 'color'\">\n        <template v-for=\"(value, index) in attribute.attribute_values\" :key=\"index\">\n          <li v-if=\"attributeValues?.includes(value.id)\"\n            :class=\"{ 'active': variantIds.includes(value.id) && !soldOutAttributesIds.includes(value.id), 'disabled': soldOutAttributesIds.includes(value.id) }\"\n            placement=\"top\">\n            <button @click=\"setVariant(product.variations, value)\" :style=\"{ 'background-color': value.hex_color }\">\n            </button>\n          </li>\n        </template>\n      </ul>\n      <div v-else>\n        <ul class=\"select-package cricle\" :class=\"attribute?.style\">\n          <template v-for=\"(value, index) of attribute.attribute_values\" :key=\"index\">\n            <li v-if=\"attributeValues?.includes(value.id)\"\n              :class=\"{ 'active': variantIds.includes(value.id) && !soldOutAttributesIds.includes(value.id), 'disabled': soldOutAttributesIds.includes(value.id) }\">\n              <img :src=\"value?.variation_image ? value?.variation_image?.original_url : '/images/product.png'\"\n                @click=\"setVariant(product.variations, value)\" v-if=\"attribute?.style == 'image'\">\n              <button v-else :id=\"'value_btn'\" :type=\"'button'\" @click=\"setVariant(product.variations, value)\">\n                {{ value?.value }}</button>\n            </li>\n          </template>\n        </ul>\n      </div>\n    </template>\n  </div>\n</div>\n</template>\n<script setup>\nlet props = defineProps({\n  product: Object,\n  attributes: Object,\n  isAllVariantStyleDropdown: Boolean,\n  owlCar: Object\n})\n\nconst emit = defineEmits(['selectVariation']);\n\nlet cartItem = ref(null);\nlet productQty = ref(1);\nlet attributeValues = ref([]);\nlet variantIds = ref([]);\nlet soldOutAttributesIds = ref([]);\nlet selectedOptions = ref([]);\nlet selectedVariation = ref(null);\n\nwatchEffect(() => {\n  let product = ref()\n  let attributes = ref()\n  if (props.product) {\n    product.value = props.product;\n  }\n\n  if (props.attributes) {\n    attributes.value = props.attributes;\n  }\n\n  // const items = store.state.cart.items;\n  // cartItem.value = items.find(item => item.product.id === product.value.id);\n});\n\nfunction checkVariantAvailability(product) {\n  selectedOptions.value = [];\n  attributeValues.value = [];\n  selectedVariation.value = null;\n\n  props?.product?.variations?.forEach(variation => {\n    variation?.attribute_values?.filter(attribute_value => {\n      if (attributeValues.value.indexOf(attribute_value?.id) === -1)\n        attributeValues.value.push(attribute_value?.id);\n    });\n  });\n\n  // Set cart Variant Default\n  if (cartItem.value?.variation) {\n    cartItem.value.variation.attribute_values.forEach(attribute_val => {\n      setVariant(props?.product?.variations, attribute_val);\n    });\n  }\n\n  if (!cartItem.value) {\n    // Set First Vatriant Default\n    for (const attribute of props?.product?.attributes) {\n      if (attributeValues.value.length && attribute?.attribute_values?.length) {\n        let values = [];\n        for (const value of attribute.attribute_values) {\n          if (values.indexOf(value.id) === -1)\n            values.push(value.id);\n          if (attributeValues.value.includes(value.id)) {\n            setVariant(props?.product?.variations, value);\n            break; // Break out of the inner loop after setting the first variant\n          }\n\n        }\n      }\n    }\n  }\n\n\n\n  // Set Variation Image\n  props?.product?.variations?.forEach(variation => {\n    let attrValues = variation?.attribute_values?.map(attribute_value => attribute_value?.id);\n    props.product?.attributes.filter(attribute => {\n      if (attribute.style == 'image') {\n        attribute.attribute_values.filter(attribute_value => {\n          if (attributeValues.value.includes(attribute_value.id)) {\n            if (attrValues.includes(attribute_value.id)) {\n              attribute_value.variation_image = variation.variation_image;\n            }\n          }\n        });\n      }\n    });\n  });\n}\n\n\nconst setVariant = (variations, value) => {\n  const index = selectedOptions.value.findIndex(item => Number(item.attribute_id) === Number(value?.attribute_id));\n  soldOutAttributesIds.value = [];\n  if (index === -1) {\n    selectedOptions.value.push({ id: Number(value?.id), attribute_id: Number(value?.attribute_id) });\n  } else {\n    selectedOptions.value[index].id = value?.id;\n  }\n\n\n  variations?.forEach(variation => {\n    let attrValues = variation?.attribute_values?.map(attribute_value => attribute_value?.id);\n    variantIds.value = selectedOptions?.value.map(variants => variants?.id);\n    let doValuesMatch = attrValues.length === selectedOptions?.value?.length &&\n      attrValues.every(value => variantIds?.value?.includes(value));\n\n\n    if (doValuesMatch) {\n      selectedVariation.value = variation;\n      props.product['quantity'] = selectedVariation?.value ? selectedVariation?.value?.quantity : product?.value?.quantity;\n      props.product['sku'] = selectedVariation.value ? selectedVariation?.value.sku : props.product?.sku;\n\n      if (props.owlCar && selectedVariation.value.variation_image) {\n        props.owlCar.to(selectedVariation.value.variation_image.id.toString());\n      }\n\n      checkStockAvailable();\n    }\n\n    if (variation.stock_status == 'out_of_stock') {\n      variation?.attribute_values.filter(attr_value => {\n        if (attrValues.some(value => variantIds?.value?.includes(value))) {\n          if (attrValues.every(value => variantIds?.value?.includes(value))) {\n            soldOutAttributesIds.value.push(attr_value.id);\n          } else if (!variantIds?.value?.includes(attr_value.id)) {\n            soldOutAttributesIds.value.push(attr_value.id);\n          }\n        } else if (attrValues.length == 1 && attrValues.includes(attr_value.id)) {\n          soldOutAttributesIds.value.push(attr_value.id);\n        }\n      });\n    }\n  });\n\n  // Set Attribute Value\n  props?.product?.attributes?.filter(attribute => {\n    attribute?.attribute_values?.filter(a_value => {\n      if (a_value?.id == value?.id) {\n        attribute.selected_value = a_value?.value;\n      }\n    });\n  });\n  emit(\"selectVariation\", selectedVariation.value);\n};\n\nconst checkStockAvailable = () => {\n  if (selectedVariation.value) {\n    selectedVariation.value['stock_status'] = selectedVariation.value.quantity < productQty.value ? 'out_of_stock' : 'in_stock';\n  } else {\n    props.product['stock_status'] = props.product.quantity < productQty.value ? 'out_of_stock' : 'in_stock';\n  }\n};\n\n\n\n\nonMounted(() => {\n  let productData = props?.product\n  checkVariantAvailability(productData);;\n})\n\n</script>\n<style lang=\"scss\" scoped></style>",
      "start": 1716056289113,
      "end": 1716056289225,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056289225,
      "end": 1716056289225,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056289225,
      "end": 1716056289225,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716056289225,
      "end": 1716056289225,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716056289225,
      "end": 1716056289225,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716056289225,
      "end": 1716056289225,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716056289225,
      "end": 1716056289225,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716056289225,
      "end": 1716056289225,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, unref as _unref, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle } from \"vue\"\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"product-title\"\n}\nconst _hoisted_2 = { key: 1 }\nconst _hoisted_3 = [\"onChange\"]\nconst _hoisted_4 = {\n  selected: \"\",\n  disabled: \"\"\n}\nconst _hoisted_5 = [\"selected\", \"value\", \"disabled\"]\nconst _hoisted_6 = { key: 2 }\nconst _hoisted_7 = { class: \"d-flex gap-3\" }\nconst _hoisted_8 = {\n  key: 0,\n  class: \"form-check\"\n}\nconst _hoisted_9 = [\"id\", \"name\", \"value\", \"checked\", \"disabled\", \"onChange\"]\nconst _hoisted_10 = [\"for\"]\nconst _hoisted_11 = [\"onClick\"]\nconst _hoisted_12 = { key: 1 }\nconst _hoisted_13 = [\"src\", \"onClick\"]\nconst _hoisted_14 = [\"onClick\"]\n\n\nconst _sfc_main = {\n  __name: 'index',\n  props: {\n  product: Object,\n  attributes: Object,\n  isAllVariantStyleDropdown: Boolean,\n  owlCar: Object\n},\n  emits: ['selectVariation'],\n  setup(__props, { emit: __emit }) {\n\nlet props = __props\n\nconst emit = __emit;\n\nlet cartItem = ref(null);\nlet productQty = ref(1);\nlet attributeValues = ref([]);\nlet variantIds = ref([]);\nlet soldOutAttributesIds = ref([]);\nlet selectedOptions = ref([]);\nlet selectedVariation = ref(null);\n\nwatchEffect(() => {\n  let product = ref()\n  let attributes = ref()\n  if (props.product) {\n    product.value = props.product;\n  }\n\n  if (props.attributes) {\n    attributes.value = props.attributes;\n  }\n\n  // const items = store.state.cart.items;\n  // cartItem.value = items.find(item => item.product.id === product.value.id);\n});\n\nfunction checkVariantAvailability(product) {\n  selectedOptions.value = [];\n  attributeValues.value = [];\n  selectedVariation.value = null;\n\n  props?.product?.variations?.forEach(variation => {\n    variation?.attribute_values?.filter(attribute_value => {\n      if (attributeValues.value.indexOf(attribute_value?.id) === -1)\n        attributeValues.value.push(attribute_value?.id);\n    });\n  });\n\n  // Set cart Variant Default\n  if (cartItem.value?.variation) {\n    cartItem.value.variation.attribute_values.forEach(attribute_val => {\n      setVariant(props?.product?.variations, attribute_val);\n    });\n  }\n\n  if (!cartItem.value) {\n    // Set First Vatriant Default\n    for (const attribute of props?.product?.attributes) {\n      if (attributeValues.value.length && attribute?.attribute_values?.length) {\n        let values = [];\n        for (const value of attribute.attribute_values) {\n          if (values.indexOf(value.id) === -1)\n            values.push(value.id);\n          if (attributeValues.value.includes(value.id)) {\n            setVariant(props?.product?.variations, value);\n            break; // Break out of the inner loop after setting the first variant\n          }\n\n        }\n      }\n    }\n  }\n\n\n\n  // Set Variation Image\n  props?.product?.variations?.forEach(variation => {\n    let attrValues = variation?.attribute_values?.map(attribute_value => attribute_value?.id);\n    props.product?.attributes.filter(attribute => {\n      if (attribute.style == 'image') {\n        attribute.attribute_values.filter(attribute_value => {\n          if (attributeValues.value.includes(attribute_value.id)) {\n            if (attrValues.includes(attribute_value.id)) {\n              attribute_value.variation_image = variation.variation_image;\n            }\n          }\n        });\n      }\n    });\n  });\n}\n\n\nconst setVariant = (variations, value) => {\n  const index = selectedOptions.value.findIndex(item => Number(item.attribute_id) === Number(value?.attribute_id));\n  soldOutAttributesIds.value = [];\n  if (index === -1) {\n    selectedOptions.value.push({ id: Number(value?.id), attribute_id: Number(value?.attribute_id) });\n  } else {\n    selectedOptions.value[index].id = value?.id;\n  }\n\n\n  variations?.forEach(variation => {\n    let attrValues = variation?.attribute_values?.map(attribute_value => attribute_value?.id);\n    variantIds.value = selectedOptions?.value.map(variants => variants?.id);\n    let doValuesMatch = attrValues.length === selectedOptions?.value?.length &&\n      attrValues.every(value => variantIds?.value?.includes(value));\n\n\n    if (doValuesMatch) {\n      selectedVariation.value = variation;\n      props.product['quantity'] = selectedVariation?.value ? selectedVariation?.value?.quantity : product?.value?.quantity;\n      props.product['sku'] = selectedVariation.value ? selectedVariation?.value.sku : props.product?.sku;\n\n      if (props.owlCar && selectedVariation.value.variation_image) {\n        props.owlCar.to(selectedVariation.value.variation_image.id.toString());\n      }\n\n      checkStockAvailable();\n    }\n\n    if (variation.stock_status == 'out_of_stock') {\n      variation?.attribute_values.filter(attr_value => {\n        if (attrValues.some(value => variantIds?.value?.includes(value))) {\n          if (attrValues.every(value => variantIds?.value?.includes(value))) {\n            soldOutAttributesIds.value.push(attr_value.id);\n          } else if (!variantIds?.value?.includes(attr_value.id)) {\n            soldOutAttributesIds.value.push(attr_value.id);\n          }\n        } else if (attrValues.length == 1 && attrValues.includes(attr_value.id)) {\n          soldOutAttributesIds.value.push(attr_value.id);\n        }\n      });\n    }\n  });\n\n  // Set Attribute Value\n  props?.product?.attributes?.filter(attribute => {\n    attribute?.attribute_values?.filter(a_value => {\n      if (a_value?.id == value?.id) {\n        attribute.selected_value = a_value?.value;\n      }\n    });\n  });\n  emit(\"selectVariation\", selectedVariation.value);\n};\n\nconst checkStockAvailable = () => {\n  if (selectedVariation.value) {\n    selectedVariation.value['stock_status'] = selectedVariation.value.quantity < productQty.value ? 'out_of_stock' : 'in_stock';\n  } else {\n    props.product['stock_status'] = props.product.quantity < productQty.value ? 'out_of_stock' : 'in_stock';\n  }\n};\n\n\n\n\nonMounted(() => {\n  let productData = props?.product\n  checkVariantAvailability(productData);;\n})\n\n\nreturn (_ctx, _cache) => {\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.attributes, (attribute, index) => {\n      return (_openBlock(), _createElementBlock(\"div\", { key: index }, [\n        (!__props.isAllVariantStyleDropdown)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n              _createElementVNode(\"h4\", null, _toDisplayString(attribute?.name) + \" : \" + _toDisplayString(attribute?.selected_value), 1)\n            ]))\n          : _createCommentVNode(\"\", true),\n        (attribute?.style == 'dropdown' || __props.isAllVariantStyleDropdown)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n              _createElementVNode(\"select\", {\n                id: \"input-state-{{index}}\",\n                class: \"form-control form-select\",\n                onChange: $event => (setVariant(__props.product.variations, attribute.attribute_values[$event.target.value]))\n              }, [\n                _createElementVNode(\"option\", _hoisted_4, _toDisplayString(_ctx.$t('Choose')) + \" \" + _toDisplayString(attribute?.name), 1),\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(attribute.attribute_values, (value, index) => {\n                  return (_openBlock(), _createElementBlock(_Fragment, { key: index }, [\n                    (_unref(attributeValues)?.includes(value.id))\n                      ? (_openBlock(), _createElementBlock(\"option\", {\n                          key: 0,\n                          selected: _unref(variantIds).includes(value.id) && !_unref(soldOutAttributesIds).includes(value.id),\n                          value: index,\n                          disabled: _unref(soldOutAttributesIds).includes(value.id)\n                        }, _toDisplayString(value.value), 9, _hoisted_5))\n                      : _createCommentVNode(\"\", true)\n                  ], 64))\n                }), 128))\n              ], 40, _hoisted_3)\n            ]))\n          : (attribute?.style == 'radio')\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [\n                _createElementVNode(\"div\", _hoisted_7, [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(attribute.attribute_values, (value, index) => {\n                    return (_openBlock(), _createElementBlock(\"div\", { key: index }, [\n                      (_unref(attributeValues)?.includes(value.id))\n                        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [\n                            _createElementVNode(\"input\", {\n                              type: \"radio\",\n                              class: _normalizeClass([\"form-check-input\", { 'disabled': _unref(soldOutAttributesIds).includes(value.id) }]),\n                              id: 'radio-' + index + '-' + index,\n                              name: 'radio-group-' + index,\n                              value: index,\n                              checked: _unref(variantIds).includes(value.id) && !_unref(soldOutAttributesIds).includes(value.id),\n                              disabled: _unref(soldOutAttributesIds).includes(value.id),\n                              onChange: $event => (setVariant(__props.product.variations, attribute.attribute_values[$event.target.value]))\n                            }, null, 42, _hoisted_9),\n                            _createElementVNode(\"label\", {\n                              for: 'radio-' + index + '-' + index,\n                              class: \"form-check-label\"\n                            }, _toDisplayString(value?.value), 9, _hoisted_10)\n                          ]))\n                        : _createCommentVNode(\"\", true)\n                    ]))\n                  }), 128))\n                ])\n              ]))\n            : (_openBlock(), _createElementBlock(_Fragment, { key: 3 }, [\n                (attribute?.style == 'color')\n                  ? (_openBlock(), _createElementBlock(\"ul\", {\n                      key: 0,\n                      class: _normalizeClass([\"select-package circle\", attribute?.style])\n                    }, [\n                      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(attribute.attribute_values, (value, index) => {\n                        return (_openBlock(), _createElementBlock(_Fragment, { key: index }, [\n                          (_unref(attributeValues)?.includes(value.id))\n                            ? (_openBlock(), _createElementBlock(\"li\", {\n                                key: 0,\n                                class: _normalizeClass({ 'active': _unref(variantIds).includes(value.id) && !_unref(soldOutAttributesIds).includes(value.id), 'disabled': _unref(soldOutAttributesIds).includes(value.id) }),\n                                placement: \"top\"\n                              }, [\n                                _createElementVNode(\"button\", {\n                                  onClick: $event => (setVariant(__props.product.variations, value)),\n                                  style: _normalizeStyle({ 'background-color': value.hex_color })\n                                }, null, 12, _hoisted_11)\n                              ], 2))\n                            : _createCommentVNode(\"\", true)\n                        ], 64))\n                      }), 128))\n                    ], 2))\n                  : (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [\n                      _createElementVNode(\"ul\", {\n                        class: _normalizeClass([\"select-package cricle\", attribute?.style])\n                      }, [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(attribute.attribute_values, (value, index) => {\n                          return (_openBlock(), _createElementBlock(_Fragment, { key: index }, [\n                            (_unref(attributeValues)?.includes(value.id))\n                              ? (_openBlock(), _createElementBlock(\"li\", {\n                                  key: 0,\n                                  class: _normalizeClass({ 'active': _unref(variantIds).includes(value.id) && !_unref(soldOutAttributesIds).includes(value.id), 'disabled': _unref(soldOutAttributesIds).includes(value.id) })\n                                }, [\n                                  (attribute?.style == 'image')\n                                    ? (_openBlock(), _createElementBlock(\"img\", {\n                                        key: 0,\n                                        src: value?.variation_image ? value?.variation_image?.original_url : '/images/product.png',\n                                        onClick: $event => (setVariant(__props.product.variations, value))\n                                      }, null, 8, _hoisted_13))\n                                    : (_openBlock(), _createElementBlock(\"button\", {\n                                        key: 1,\n                                        id: 'value_btn',\n                                        type: 'button',\n                                        onClick: $event => (setVariant(__props.product.variations, value))\n                                      }, _toDisplayString(value?.value), 9, _hoisted_14))\n                                ], 2))\n                              : _createCommentVNode(\"\", true)\n                          ], 64))\n                        }), 128))\n                      ], 2)\n                    ]))\n              ], 64))\n      ]))\n    }), 128))\n  ]))\n}\n}\n\n}\n\n\n\nexport default _sfc_main",
      "start": 1716056289225,
      "end": 1716056289226,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716056289226,
      "end": 1716056289226,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056289226,
      "end": 1716056289226,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056289226,
      "end": 1716056289226,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716056289226,
      "end": 1716056289226,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1716056289226,
      "end": 1716056289226,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056289227,
      "end": 1716056289227,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { ref, watchEffect, onMounted } from 'vue';\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, unref as _unref, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle } from \"vue\"\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"product-title\"\n}\nconst _hoisted_2 = { key: 1 }\nconst _hoisted_3 = [\"onChange\"]\nconst _hoisted_4 = {\n  selected: \"\",\n  disabled: \"\"\n}\nconst _hoisted_5 = [\"selected\", \"value\", \"disabled\"]\nconst _hoisted_6 = { key: 2 }\nconst _hoisted_7 = { class: \"d-flex gap-3\" }\nconst _hoisted_8 = {\n  key: 0,\n  class: \"form-check\"\n}\nconst _hoisted_9 = [\"id\", \"name\", \"value\", \"checked\", \"disabled\", \"onChange\"]\nconst _hoisted_10 = [\"for\"]\nconst _hoisted_11 = [\"onClick\"]\nconst _hoisted_12 = { key: 1 }\nconst _hoisted_13 = [\"src\", \"onClick\"]\nconst _hoisted_14 = [\"onClick\"]\n\n\nconst _sfc_main = {\n  __name: 'index',\n  props: {\n  product: Object,\n  attributes: Object,\n  isAllVariantStyleDropdown: Boolean,\n  owlCar: Object\n},\n  emits: ['selectVariation'],\n  setup(__props, { emit: __emit }) {\n\nlet props = __props\n\nconst emit = __emit;\n\nlet cartItem = ref(null);\nlet productQty = ref(1);\nlet attributeValues = ref([]);\nlet variantIds = ref([]);\nlet soldOutAttributesIds = ref([]);\nlet selectedOptions = ref([]);\nlet selectedVariation = ref(null);\n\nwatchEffect(() => {\n  let product = ref()\n  let attributes = ref()\n  if (props.product) {\n    product.value = props.product;\n  }\n\n  if (props.attributes) {\n    attributes.value = props.attributes;\n  }\n\n  // const items = store.state.cart.items;\n  // cartItem.value = items.find(item => item.product.id === product.value.id);\n});\n\nfunction checkVariantAvailability(product) {\n  selectedOptions.value = [];\n  attributeValues.value = [];\n  selectedVariation.value = null;\n\n  props?.product?.variations?.forEach(variation => {\n    variation?.attribute_values?.filter(attribute_value => {\n      if (attributeValues.value.indexOf(attribute_value?.id) === -1)\n        attributeValues.value.push(attribute_value?.id);\n    });\n  });\n\n  // Set cart Variant Default\n  if (cartItem.value?.variation) {\n    cartItem.value.variation.attribute_values.forEach(attribute_val => {\n      setVariant(props?.product?.variations, attribute_val);\n    });\n  }\n\n  if (!cartItem.value) {\n    // Set First Vatriant Default\n    for (const attribute of props?.product?.attributes) {\n      if (attributeValues.value.length && attribute?.attribute_values?.length) {\n        let values = [];\n        for (const value of attribute.attribute_values) {\n          if (values.indexOf(value.id) === -1)\n            values.push(value.id);\n          if (attributeValues.value.includes(value.id)) {\n            setVariant(props?.product?.variations, value);\n            break; // Break out of the inner loop after setting the first variant\n          }\n\n        }\n      }\n    }\n  }\n\n\n\n  // Set Variation Image\n  props?.product?.variations?.forEach(variation => {\n    let attrValues = variation?.attribute_values?.map(attribute_value => attribute_value?.id);\n    props.product?.attributes.filter(attribute => {\n      if (attribute.style == 'image') {\n        attribute.attribute_values.filter(attribute_value => {\n          if (attributeValues.value.includes(attribute_value.id)) {\n            if (attrValues.includes(attribute_value.id)) {\n              attribute_value.variation_image = variation.variation_image;\n            }\n          }\n        });\n      }\n    });\n  });\n}\n\n\nconst setVariant = (variations, value) => {\n  const index = selectedOptions.value.findIndex(item => Number(item.attribute_id) === Number(value?.attribute_id));\n  soldOutAttributesIds.value = [];\n  if (index === -1) {\n    selectedOptions.value.push({ id: Number(value?.id), attribute_id: Number(value?.attribute_id) });\n  } else {\n    selectedOptions.value[index].id = value?.id;\n  }\n\n\n  variations?.forEach(variation => {\n    let attrValues = variation?.attribute_values?.map(attribute_value => attribute_value?.id);\n    variantIds.value = selectedOptions?.value.map(variants => variants?.id);\n    let doValuesMatch = attrValues.length === selectedOptions?.value?.length &&\n      attrValues.every(value => variantIds?.value?.includes(value));\n\n\n    if (doValuesMatch) {\n      selectedVariation.value = variation;\n      props.product['quantity'] = selectedVariation?.value ? selectedVariation?.value?.quantity : product?.value?.quantity;\n      props.product['sku'] = selectedVariation.value ? selectedVariation?.value.sku : props.product?.sku;\n\n      if (props.owlCar && selectedVariation.value.variation_image) {\n        props.owlCar.to(selectedVariation.value.variation_image.id.toString());\n      }\n\n      checkStockAvailable();\n    }\n\n    if (variation.stock_status == 'out_of_stock') {\n      variation?.attribute_values.filter(attr_value => {\n        if (attrValues.some(value => variantIds?.value?.includes(value))) {\n          if (attrValues.every(value => variantIds?.value?.includes(value))) {\n            soldOutAttributesIds.value.push(attr_value.id);\n          } else if (!variantIds?.value?.includes(attr_value.id)) {\n            soldOutAttributesIds.value.push(attr_value.id);\n          }\n        } else if (attrValues.length == 1 && attrValues.includes(attr_value.id)) {\n          soldOutAttributesIds.value.push(attr_value.id);\n        }\n      });\n    }\n  });\n\n  // Set Attribute Value\n  props?.product?.attributes?.filter(attribute => {\n    attribute?.attribute_values?.filter(a_value => {\n      if (a_value?.id == value?.id) {\n        attribute.selected_value = a_value?.value;\n      }\n    });\n  });\n  emit(\"selectVariation\", selectedVariation.value);\n};\n\nconst checkStockAvailable = () => {\n  if (selectedVariation.value) {\n    selectedVariation.value['stock_status'] = selectedVariation.value.quantity < productQty.value ? 'out_of_stock' : 'in_stock';\n  } else {\n    props.product['stock_status'] = props.product.quantity < productQty.value ? 'out_of_stock' : 'in_stock';\n  }\n};\n\n\n\n\nonMounted(() => {\n  let productData = props?.product\n  checkVariantAvailability(productData);;\n})\n\n\nreturn (_ctx, _cache) => {\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.attributes, (attribute, index) => {\n      return (_openBlock(), _createElementBlock(\"div\", { key: index }, [\n        (!__props.isAllVariantStyleDropdown)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n              _createElementVNode(\"h4\", null, _toDisplayString(attribute?.name) + \" : \" + _toDisplayString(attribute?.selected_value), 1)\n            ]))\n          : _createCommentVNode(\"\", true),\n        (attribute?.style == 'dropdown' || __props.isAllVariantStyleDropdown)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n              _createElementVNode(\"select\", {\n                id: \"input-state-{{index}}\",\n                class: \"form-control form-select\",\n                onChange: $event => (setVariant(__props.product.variations, attribute.attribute_values[$event.target.value]))\n              }, [\n                _createElementVNode(\"option\", _hoisted_4, _toDisplayString(_ctx.$t('Choose')) + \" \" + _toDisplayString(attribute?.name), 1),\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(attribute.attribute_values, (value, index) => {\n                  return (_openBlock(), _createElementBlock(_Fragment, { key: index }, [\n                    (_unref(attributeValues)?.includes(value.id))\n                      ? (_openBlock(), _createElementBlock(\"option\", {\n                          key: 0,\n                          selected: _unref(variantIds).includes(value.id) && !_unref(soldOutAttributesIds).includes(value.id),\n                          value: index,\n                          disabled: _unref(soldOutAttributesIds).includes(value.id)\n                        }, _toDisplayString(value.value), 9, _hoisted_5))\n                      : _createCommentVNode(\"\", true)\n                  ], 64))\n                }), 128))\n              ], 40, _hoisted_3)\n            ]))\n          : (attribute?.style == 'radio')\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [\n                _createElementVNode(\"div\", _hoisted_7, [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(attribute.attribute_values, (value, index) => {\n                    return (_openBlock(), _createElementBlock(\"div\", { key: index }, [\n                      (_unref(attributeValues)?.includes(value.id))\n                        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [\n                            _createElementVNode(\"input\", {\n                              type: \"radio\",\n                              class: _normalizeClass([\"form-check-input\", { 'disabled': _unref(soldOutAttributesIds).includes(value.id) }]),\n                              id: 'radio-' + index + '-' + index,\n                              name: 'radio-group-' + index,\n                              value: index,\n                              checked: _unref(variantIds).includes(value.id) && !_unref(soldOutAttributesIds).includes(value.id),\n                              disabled: _unref(soldOutAttributesIds).includes(value.id),\n                              onChange: $event => (setVariant(__props.product.variations, attribute.attribute_values[$event.target.value]))\n                            }, null, 42, _hoisted_9),\n                            _createElementVNode(\"label\", {\n                              for: 'radio-' + index + '-' + index,\n                              class: \"form-check-label\"\n                            }, _toDisplayString(value?.value), 9, _hoisted_10)\n                          ]))\n                        : _createCommentVNode(\"\", true)\n                    ]))\n                  }), 128))\n                ])\n              ]))\n            : (_openBlock(), _createElementBlock(_Fragment, { key: 3 }, [\n                (attribute?.style == 'color')\n                  ? (_openBlock(), _createElementBlock(\"ul\", {\n                      key: 0,\n                      class: _normalizeClass([\"select-package circle\", attribute?.style])\n                    }, [\n                      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(attribute.attribute_values, (value, index) => {\n                        return (_openBlock(), _createElementBlock(_Fragment, { key: index }, [\n                          (_unref(attributeValues)?.includes(value.id))\n                            ? (_openBlock(), _createElementBlock(\"li\", {\n                                key: 0,\n                                class: _normalizeClass({ 'active': _unref(variantIds).includes(value.id) && !_unref(soldOutAttributesIds).includes(value.id), 'disabled': _unref(soldOutAttributesIds).includes(value.id) }),\n                                placement: \"top\"\n                              }, [\n                                _createElementVNode(\"button\", {\n                                  onClick: $event => (setVariant(__props.product.variations, value)),\n                                  style: _normalizeStyle({ 'background-color': value.hex_color })\n                                }, null, 12, _hoisted_11)\n                              ], 2))\n                            : _createCommentVNode(\"\", true)\n                        ], 64))\n                      }), 128))\n                    ], 2))\n                  : (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [\n                      _createElementVNode(\"ul\", {\n                        class: _normalizeClass([\"select-package cricle\", attribute?.style])\n                      }, [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(attribute.attribute_values, (value, index) => {\n                          return (_openBlock(), _createElementBlock(_Fragment, { key: index }, [\n                            (_unref(attributeValues)?.includes(value.id))\n                              ? (_openBlock(), _createElementBlock(\"li\", {\n                                  key: 0,\n                                  class: _normalizeClass({ 'active': _unref(variantIds).includes(value.id) && !_unref(soldOutAttributesIds).includes(value.id), 'disabled': _unref(soldOutAttributesIds).includes(value.id) })\n                                }, [\n                                  (attribute?.style == 'image')\n                                    ? (_openBlock(), _createElementBlock(\"img\", {\n                                        key: 0,\n                                        src: value?.variation_image ? value?.variation_image?.original_url : '/images/product.png',\n                                        onClick: $event => (setVariant(__props.product.variations, value))\n                                      }, null, 8, _hoisted_13))\n                                    : (_openBlock(), _createElementBlock(\"button\", {\n                                        key: 1,\n                                        id: 'value_btn',\n                                        type: 'button',\n                                        onClick: $event => (setVariant(__props.product.variations, value))\n                                      }, _toDisplayString(value?.value), 9, _hoisted_14))\n                                ], 2))\n                              : _createCommentVNode(\"\", true)\n                          ], 64))\n                        }), 128))\n                      ], 2)\n                    ]))\n              ], 64))\n      ]))\n    }), 128))\n  ]))\n}\n}\n\n}\n\n\n\nexport default _sfc_main",
      "start": 1716056289227,
      "end": 1716056289233,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056289233,
      "end": 1716056289233,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056289233,
      "end": 1716056289233,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716056289233,
      "end": 1716056289233,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716056289233,
      "end": 1716056289233,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716056289233,
      "end": 1716056289234,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716056289234,
      "end": 1716056289234,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1716056289234,
      "end": 1716056289234,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1716056289234,
      "end": 1716056289234,
      "order": "normal"
    }
  ]
}
