{
  "resolvedId": "C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Shop/Checkout/address-block/index.vue?nuxt_component=async&nuxt_component_name=ShopCheckoutAddressBlock",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template> \n<div>\n<div class=\"empty-box\" v-if=\"!addresses?.length\">\n    <h2>{{ $t('No Address Found') }}</h2>\n</div>\n<div class=\"row g-3\">\n        <div class=\"col-xxl-6 col-lg-12 col-md-6\" v-for=\"(address,index) of addresses\" :key=\"index\">\n            <label :for=\"`adddress-${type}-${index}`\">\n                <div class=\"delivery-address-box\">\n                    <div>\n                        <div class=\"form-check\">\n                            <input\n                                class=\"form-check-input\"\n                                type=\"radio\"\n                                :value=\"address.id\"\n                                :name=\"`address-${type}`\"\n                                :id=\"`address-${type}-${address.id}`\"\n                                :checked=\"index == 0\"\n                                @change=\"useCheckoutStore().SetCheckoutAddress({ type, id: address.id })\">\n                        </div>\n                        <ul class=\"delivery-address-detail\">\n                            <li>\n                                <h4 class=\"fw-semibold\">{{ address?.title }}</h4>\n                            </li>\n                            <li>\n                                <p class=\"text-content\">\n                                    <span class=\"text-title\">{{ $t('Address') }}: </span>\n                                    {{ address?.street }}, {{ address?.city }}, {{ address?.state?.name }},\n                                    {{ address?.country?.name }}\n                                </p>\n                            </li>\n                            <li v-if=\"address?.pincode\">\n                                <h6 class=\"text-content\">\n                                    <span class=\"text-title\">{{ $t('Pin Code') }}:</span> {{ address?.pincode }}\n                                </h6>\n                            </li>\n                            <li v-if=\"address?.phone\">\n                                <h6 class=\"text-content mb-0\">\n                                    <span class=\"text-title\">{{ $t('Phone') }} :</span> +{{ address?.country_code }} {{ address?.phone }}\n                                </h6>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </label>\n        </div>\n</div>\n</div>\n</template>\n\n<script setup>\nimport { storeToRefs } from 'pinia';\nimport { useUserStore } from '~~/store/user';\nimport { useCheckoutStore } from '~~/store/checkout';\nlet props = defineProps({\n    addresses:Object,\n    type: {\n        default: 'shipping',\n        type: String\n    },\n    modelValue: Object\n});\n\nconst selectedAddressId = ref(null);\n\nlet emit = defineEmits(['selectAddress'])\n\nlet { UserInfo } = storeToRefs(useUserStore()), AddressModal = ref({ show: false, type: props.type }), AddressForm = ref(null)\n\nwatch(() => props.addresses, (newAddresses) => {\n      if (newAddresses && newAddresses.length > 0) {\n        selectedAddressId.value = newAddresses[0].id;\n        emit('selectAddress', selectedAddressId.value);\n      }\n    });\n\n\nconst set = (event) => {\n      selectedAddressId.value = Number((event.target)?.value);\n      emit('selectAddress', selectedAddressId.value);\n };\n\nif (props.addresses && props.addresses.length > 0) {\n    selectedAddressId.value = props.addresses[0].id;\n    useCheckoutStore().SetCheckoutAddress({ type:props.type, id: selectedAddressId.value })\n    emit('selectAddress', selectedAddressId.value);\n\n  }\nonMounted(() => {\n  if (props.addresses && props.addresses.length > 0) {\n    selectedAddressId.value = props.addresses[0].id;\n    useCheckoutStore().SetCheckoutAddress({ type:props.type, id: selectedAddressId.value })\n    emit('selectAddress', selectedAddressId.value);\n\n  }\n});\n\n\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
      "start": 1716056271170,
      "end": 1716056271394,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056271394,
      "end": 1716056271394,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056271394,
      "end": 1716056271394,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716056271394,
      "end": 1716056271394,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716056271394,
      "end": 1716056271394,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716056271394,
      "end": 1716056271394,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716056271394,
      "end": 1716056271394,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716056271394,
      "end": 1716056271394,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, unref as _unref, createTextVNode as _createTextVNode } from \"vue\"\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"empty-box\"\n}\nconst _hoisted_2 = { class: \"row g-3\" }\nconst _hoisted_3 = [\"for\"]\nconst _hoisted_4 = { class: \"delivery-address-box\" }\nconst _hoisted_5 = { class: \"form-check\" }\nconst _hoisted_6 = [\"value\", \"name\", \"id\", \"checked\", \"onChange\"]\nconst _hoisted_7 = { class: \"delivery-address-detail\" }\nconst _hoisted_8 = { class: \"fw-semibold\" }\nconst _hoisted_9 = { class: \"text-content\" }\nconst _hoisted_10 = { class: \"text-title\" }\nconst _hoisted_11 = { key: 0 }\nconst _hoisted_12 = { class: \"text-content\" }\nconst _hoisted_13 = { class: \"text-title\" }\nconst _hoisted_14 = { key: 1 }\nconst _hoisted_15 = { class: \"text-content mb-0\" }\nconst _hoisted_16 = { class: \"text-title\" }\n\nimport { storeToRefs } from 'pinia';\nimport { useUserStore } from '~~/store/user';\nimport { useCheckoutStore } from '~~/store/checkout';\n\nconst _sfc_main = {\n  __name: 'index',\n  props: {\n    addresses:Object,\n    type: {\n        default: 'shipping',\n        type: String\n    },\n    modelValue: Object\n},\n  emits: ['selectAddress'],\n  setup(__props, { emit: __emit }) {\n\nlet props = __props;\n\nconst selectedAddressId = ref(null);\n\nlet emit = __emit\n\nlet { UserInfo } = storeToRefs(useUserStore()), AddressModal = ref({ show: false, type: props.type }), AddressForm = ref(null)\n\nwatch(() => props.addresses, (newAddresses) => {\n      if (newAddresses && newAddresses.length > 0) {\n        selectedAddressId.value = newAddresses[0].id;\n        emit('selectAddress', selectedAddressId.value);\n      }\n    });\n\n\nconst set = (event) => {\n      selectedAddressId.value = Number((event.target)?.value);\n      emit('selectAddress', selectedAddressId.value);\n };\n\nif (props.addresses && props.addresses.length > 0) {\n    selectedAddressId.value = props.addresses[0].id;\n    useCheckoutStore().SetCheckoutAddress({ type:props.type, id: selectedAddressId.value })\n    emit('selectAddress', selectedAddressId.value);\n\n  }\nonMounted(() => {\n  if (props.addresses && props.addresses.length > 0) {\n    selectedAddressId.value = props.addresses[0].id;\n    useCheckoutStore().SetCheckoutAddress({ type:props.type, id: selectedAddressId.value })\n    emit('selectAddress', selectedAddressId.value);\n\n  }\n});\n\n\n\nreturn (_ctx, _cache) => {\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    (!__props.addresses?.length)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n          _createElementVNode(\"h2\", null, _toDisplayString(_ctx.$t('No Address Found')), 1)\n        ]))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_2, [\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.addresses, (address, index) => {\n        return (_openBlock(), _createElementBlock(\"div\", {\n          class: \"col-xxl-6 col-lg-12 col-md-6\",\n          key: index\n        }, [\n          _createElementVNode(\"label\", {\n            for: `adddress-${__props.type}-${index}`\n          }, [\n            _createElementVNode(\"div\", _hoisted_4, [\n              _createElementVNode(\"div\", null, [\n                _createElementVNode(\"div\", _hoisted_5, [\n                  _createElementVNode(\"input\", {\n                    class: \"form-check-input\",\n                    type: \"radio\",\n                    value: address.id,\n                    name: `address-${__props.type}`,\n                    id: `address-${__props.type}-${address.id}`,\n                    checked: index == 0,\n                    onChange: $event => (_unref(useCheckoutStore)().SetCheckoutAddress({ type: __props.type, id: address.id }))\n                  }, null, 40, _hoisted_6)\n                ]),\n                _createElementVNode(\"ul\", _hoisted_7, [\n                  _createElementVNode(\"li\", null, [\n                    _createElementVNode(\"h4\", _hoisted_8, _toDisplayString(address?.title), 1)\n                  ]),\n                  _createElementVNode(\"li\", null, [\n                    _createElementVNode(\"p\", _hoisted_9, [\n                      _createElementVNode(\"span\", _hoisted_10, _toDisplayString(_ctx.$t('Address')) + \": \", 1),\n                      _createTextVNode(\" \" + _toDisplayString(address?.street) + \", \" + _toDisplayString(address?.city) + \", \" + _toDisplayString(address?.state?.name) + \", \" + _toDisplayString(address?.country?.name), 1)\n                    ])\n                  ]),\n                  (address?.pincode)\n                    ? (_openBlock(), _createElementBlock(\"li\", _hoisted_11, [\n                        _createElementVNode(\"h6\", _hoisted_12, [\n                          _createElementVNode(\"span\", _hoisted_13, _toDisplayString(_ctx.$t('Pin Code')) + \":\", 1),\n                          _createTextVNode(\" \" + _toDisplayString(address?.pincode), 1)\n                        ])\n                      ]))\n                    : _createCommentVNode(\"\", true),\n                  (address?.phone)\n                    ? (_openBlock(), _createElementBlock(\"li\", _hoisted_14, [\n                        _createElementVNode(\"h6\", _hoisted_15, [\n                          _createElementVNode(\"span\", _hoisted_16, _toDisplayString(_ctx.$t('Phone')) + \" :\", 1),\n                          _createTextVNode(\" +\" + _toDisplayString(address?.country_code) + \" \" + _toDisplayString(address?.phone), 1)\n                        ])\n                      ]))\n                    : _createCommentVNode(\"\", true)\n                ])\n              ])\n            ])\n          ], 8, _hoisted_3)\n        ]))\n      }), 128))\n    ])\n  ]))\n}\n}\n\n}\n\n\n\nexport default _sfc_main",
      "start": 1716056271394,
      "end": 1716056271398,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Shop/Checkout/address-block/index.vue\").then(r => r.default))",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056271398,
      "end": 1716056271398,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056271398,
      "end": 1716056271399,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716056271399,
      "end": 1716056271399,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716056271399,
      "end": 1716056271399,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716056271399,
      "end": 1716056271399,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716056271399,
      "end": 1716056271399,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => __vitePreload(() => import(\"C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Shop/Checkout/address-block/index.vue\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then(r => r.default))",
      "start": 1716056271399,
      "end": 1716056271399,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1716056271399,
      "end": 1716056271399,
      "order": "normal"
    }
  ]
}
