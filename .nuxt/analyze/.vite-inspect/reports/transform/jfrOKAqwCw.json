{
  "resolvedId": "C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Widgets/Modals/ProductModal/Main.vue?nuxt_component=async&nuxt_component_name=WidgetsModalsProductModalMain",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n    <div class=\"row g-sm-4 g-2\">\n        <div class=\"col-lg-6\">\n            <WidgetsModalsProductModalImages  :Data=\"Data.item\"/>\n        </div>\n        <WidgetsModalsProductModalRight  :Product=\"Data.item\" />\n    </div>\n</template>\n\n<script setup>\nimport { storeToRefs } from 'pinia';\nimport { useCartStore } from '~~/store/cart';\nlet props = defineProps({ Data: { type: Object } })\n\nlet { addSelectionToCart } = useCartStore(), { cart } = storeToRefs(useCartStore());\nlet attributes = ref({}), existingCartItemIndex = ref(-1), GlobalSelectedVariant = ref({}), selectedAttributeIds = ref([]), productAvailable = ref(true), formSubmitted = ref(false);\n\nprops.Data.item?.attributes.forEach((attribute, i) => {\n        attributes.value[attribute.name] = { dropDownOptions: attribute.attribute_values, available:true }\n    })\n\n    \nwatch(() => attributes, () => {\n    productAvailable.value = true, selectedAttributeIds.value = [], existingCartItemIndex.value = -1,GlobalSelectedVariant.value = {};\n    for (const key in attributes.value) {\n        attributes.value[key].selected?.id && selectedAttributeIds.value.push(attributes.value[key].selected?.id)\n    }\n    if (selectedAttributeIds.value.length == props.Data.item.variations[0]?.attribute_values?.length) {\n        props.Data.item.variations.every((variant, index) => {\n            let count = 0;\n            selectedAttributeIds.value.forEach(id => {\n                variant.attribute_values.map(value => value.id).includes(id) && count++;\n            })\n            if (count == selectedAttributeIds.value.length) {\n                GlobalSelectedVariant.value = JSON.parse(JSON.stringify(variant))\n                let productIndex = cart.value.findIndex(item => (item.product_id == props.Data.item.id && item.variation_id == variant.id))\n                productIndex >= 0 ? existingCartItemIndex.value = productIndex : existingCartItemIndex.value = -1\n                return false\n            } else return true\n        })\n        Object.keys(GlobalSelectedVariant.value).length?productAvailable.value = true:productAvailable.value = false\n    }\n}, { deep: true })\n</script>",
      "start": 1716056285179,
      "end": 1716056285349,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1716056285349,
      "end": 1716056285349,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1716056285349,
      "end": 1716056285349,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1716056285349,
      "end": 1716056285350,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1716056285350,
      "end": 1716056285350,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1716056285350,
      "end": 1716056285350,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1716056285350,
      "end": 1716056285350,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1716056285350,
      "end": 1716056285350,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"row g-sm-4 g-2\" }\nconst _hoisted_2 = { class: \"col-lg-6\" }\n\nimport { storeToRefs } from 'pinia';\nimport { useCartStore } from '~~/store/cart';\n\nconst _sfc_main = {\n  __name: 'Main',\n  props: { Data: { type: Object } },\n  setup(__props) {\n\nlet props = __props\n\nlet { addSelectionToCart } = useCartStore(), { cart } = storeToRefs(useCartStore());\nlet attributes = ref({}), existingCartItemIndex = ref(-1), GlobalSelectedVariant = ref({}), selectedAttributeIds = ref([]), productAvailable = ref(true), formSubmitted = ref(false);\n\nprops.Data.item?.attributes.forEach((attribute, i) => {\n        attributes.value[attribute.name] = { dropDownOptions: attribute.attribute_values, available:true }\n    })\n\n    \nwatch(() => attributes, () => {\n    productAvailable.value = true, selectedAttributeIds.value = [], existingCartItemIndex.value = -1,GlobalSelectedVariant.value = {};\n    for (const key in attributes.value) {\n        attributes.value[key].selected?.id && selectedAttributeIds.value.push(attributes.value[key].selected?.id)\n    }\n    if (selectedAttributeIds.value.length == props.Data.item.variations[0]?.attribute_values?.length) {\n        props.Data.item.variations.every((variant, index) => {\n            let count = 0;\n            selectedAttributeIds.value.forEach(id => {\n                variant.attribute_values.map(value => value.id).includes(id) && count++;\n            })\n            if (count == selectedAttributeIds.value.length) {\n                GlobalSelectedVariant.value = JSON.parse(JSON.stringify(variant))\n                let productIndex = cart.value.findIndex(item => (item.product_id == props.Data.item.id && item.variation_id == variant.id))\n                productIndex >= 0 ? existingCartItemIndex.value = productIndex : existingCartItemIndex.value = -1\n                return false\n            } else return true\n        })\n        Object.keys(GlobalSelectedVariant.value).length?productAvailable.value = true:productAvailable.value = false\n    }\n}, { deep: true })\n\nreturn (_ctx, _cache) => {\n  const _component_WidgetsModalsProductModalImages = _resolveComponent(\"WidgetsModalsProductModalImages\")\n  const _component_WidgetsModalsProductModalRight = _resolveComponent(\"WidgetsModalsProductModalRight\")\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createVNode(_component_WidgetsModalsProductModalImages, {\n        Data: __props.Data.item\n      }, null, 8, [\"Data\"])\n    ]),\n    _createVNode(_component_WidgetsModalsProductModalRight, {\n      Product: __props.Data.item\n    }, null, 8, [\"Product\"])\n  ]))\n}\n}\n\n}\n\n\n\nexport default _sfc_main",
      "start": 1716056285350,
      "end": 1716056285352,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1716056285352,
      "end": 1716056285352,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1716056285352,
      "end": 1716056285352,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1716056285352,
      "end": 1716056285352,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1716056285352,
      "end": 1716056285352,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "result": "import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => import(\"C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Widgets/Modals/ProductModal/Main.vue\").then(r => r.default))",
      "start": 1716056285352,
      "end": 1716056285352,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "replace",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { defineAsyncComponent } from \"vue\"\nexport default defineAsyncComponent(() => __vitePreload(() => import(\"C:/Users/mopc/Downloads/Compressed/Fastkart-Frontend-Nuxt/Fastkart-Frontend-Nuxt/components/Widgets/Modals/ProductModal/Main.vue\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then(r => r.default))",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1716056285353,
      "end": 1716056285353,
      "order": "normal"
    }
  ]
}
